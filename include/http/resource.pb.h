// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_resource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_resource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_resource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_resource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_resource_2eproto;
namespace crushed {
class ResourceRequest;
class ResourceRequestDefaultTypeInternal;
extern ResourceRequestDefaultTypeInternal _ResourceRequest_default_instance_;
class ResourceResponse;
class ResourceResponseDefaultTypeInternal;
extern ResourceResponseDefaultTypeInternal _ResourceResponse_default_instance_;
class ResourceResultCode;
class ResourceResultCodeDefaultTypeInternal;
extern ResourceResultCodeDefaultTypeInternal _ResourceResultCode_default_instance_;
}  // namespace crushed
PROTOBUF_NAMESPACE_OPEN
template<> ::crushed::ResourceRequest* Arena::CreateMaybeMessage<::crushed::ResourceRequest>(Arena*);
template<> ::crushed::ResourceResponse* Arena::CreateMaybeMessage<::crushed::ResourceResponse>(Arena*);
template<> ::crushed::ResourceResultCode* Arena::CreateMaybeMessage<::crushed::ResourceResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace crushed {

// ===================================================================

class ResourceResultCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.ResourceResultCode) */ {
 public:
  inline ResourceResultCode() : ResourceResultCode(nullptr) {};
  virtual ~ResourceResultCode();

  ResourceResultCode(const ResourceResultCode& from);
  ResourceResultCode(ResourceResultCode&& from) noexcept
    : ResourceResultCode() {
    *this = ::std::move(from);
  }

  inline ResourceResultCode& operator=(const ResourceResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceResultCode& operator=(ResourceResultCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceResultCode* internal_default_instance() {
    return reinterpret_cast<const ResourceResultCode*>(
               &_ResourceResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResourceResultCode& a, ResourceResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceResultCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceResultCode* New() const final {
    return CreateMaybeMessage<ResourceResultCode>(nullptr);
  }

  ResourceResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceResultCode& from);
  void MergeFrom(const ResourceResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.ResourceResultCode";
  }
  protected:
  explicit ResourceResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // bytes type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.ResourceResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class ResourceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.ResourceRequest) */ {
 public:
  inline ResourceRequest() : ResourceRequest(nullptr) {};
  virtual ~ResourceRequest();

  ResourceRequest(const ResourceRequest& from);
  ResourceRequest(ResourceRequest&& from) noexcept
    : ResourceRequest() {
    *this = ::std::move(from);
  }

  inline ResourceRequest& operator=(const ResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRequest& operator=(ResourceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceRequest* internal_default_instance() {
    return reinterpret_cast<const ResourceRequest*>(
               &_ResourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceRequest& a, ResourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceRequest* New() const final {
    return CreateMaybeMessage<ResourceRequest>(nullptr);
  }

  ResourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceRequest& from);
  void MergeFrom(const ResourceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.ResourceRequest";
  }
  protected:
  explicit ResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // bytes path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:crushed.ResourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class ResourceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.ResourceResponse) */ {
 public:
  inline ResourceResponse() : ResourceResponse(nullptr) {};
  virtual ~ResourceResponse();

  ResourceResponse(const ResourceResponse& from);
  ResourceResponse(ResourceResponse&& from) noexcept
    : ResourceResponse() {
    *this = ::std::move(from);
  }

  inline ResourceResponse& operator=(const ResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceResponse& operator=(ResourceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceResponse* internal_default_instance() {
    return reinterpret_cast<const ResourceResponse*>(
               &_ResourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResourceResponse& a, ResourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceResponse* New() const final {
    return CreateMaybeMessage<ResourceResponse>(nullptr);
  }

  ResourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceResponse& from);
  void MergeFrom(const ResourceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.ResourceResponse";
  }
  protected:
  explicit ResourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseMessageFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // bytes responseMessage = 2;
  void clear_responsemessage();
  const std::string& responsemessage() const;
  void set_responsemessage(const std::string& value);
  void set_responsemessage(std::string&& value);
  void set_responsemessage(const char* value);
  void set_responsemessage(const void* value, size_t size);
  std::string* mutable_responsemessage();
  std::string* release_responsemessage();
  void set_allocated_responsemessage(std::string* responsemessage);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_responsemessage();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_responsemessage(
      std::string* responsemessage);
  private:
  const std::string& _internal_responsemessage() const;
  void _internal_set_responsemessage(const std::string& value);
  std::string* _internal_mutable_responsemessage();
  public:

  // .crushed.ResourceResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::ResourceResultCode& result() const;
  ::crushed::ResourceResultCode* release_result();
  ::crushed::ResourceResultCode* mutable_result();
  void set_allocated_result(::crushed::ResourceResultCode* result);
  private:
  const ::crushed::ResourceResultCode& _internal_result() const;
  ::crushed::ResourceResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::ResourceResultCode* result);
  ::crushed::ResourceResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:crushed.ResourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsemessage_;
  ::crushed::ResourceResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// ===================================================================

class ResourceService_Stub;

class ResourceService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ResourceService() {};
 public:
  virtual ~ResourceService();

  typedef ResourceService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void getResource(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::ResourceRequest* request,
                       ::crushed::ResourceResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ResourceService);
};

class ResourceService_Stub : public ResourceService {
 public:
  ResourceService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ResourceService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ResourceService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ResourceService ------------------------------------------

  void getResource(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::ResourceRequest* request,
                       ::crushed::ResourceResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ResourceService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResourceResultCode

// int32 code = 1;
inline void ResourceResultCode::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourceResultCode::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourceResultCode::code() const {
  // @@protoc_insertion_point(field_get:crushed.ResourceResultCode.code)
  return _internal_code();
}
inline void ResourceResultCode::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ResourceResultCode::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:crushed.ResourceResultCode.code)
}

// bytes type = 2;
inline void ResourceResultCode::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourceResultCode::type() const {
  // @@protoc_insertion_point(field_get:crushed.ResourceResultCode.type)
  return _internal_type();
}
inline void ResourceResultCode::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:crushed.ResourceResultCode.type)
}
inline std::string* ResourceResultCode::mutable_type() {
  // @@protoc_insertion_point(field_mutable:crushed.ResourceResultCode.type)
  return _internal_mutable_type();
}
inline const std::string& ResourceResultCode::_internal_type() const {
  return type_.Get();
}
inline void ResourceResultCode::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceResultCode::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.ResourceResultCode.type)
}
inline void ResourceResultCode::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.ResourceResultCode.type)
}
inline void ResourceResultCode::set_type(const void* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.ResourceResultCode.type)
}
inline std::string* ResourceResultCode::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceResultCode::release_type() {
  // @@protoc_insertion_point(field_release:crushed.ResourceResultCode.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceResultCode::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.ResourceResultCode.type)
}
inline std::string* ResourceResultCode::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.ResourceResultCode.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourceResultCode::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ResourceResultCode.type)
}

// bytes msg = 3;
inline void ResourceResultCode::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourceResultCode::msg() const {
  // @@protoc_insertion_point(field_get:crushed.ResourceResultCode.msg)
  return _internal_msg();
}
inline void ResourceResultCode::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:crushed.ResourceResultCode.msg)
}
inline std::string* ResourceResultCode::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:crushed.ResourceResultCode.msg)
  return _internal_mutable_msg();
}
inline const std::string& ResourceResultCode::_internal_msg() const {
  return msg_.Get();
}
inline void ResourceResultCode::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceResultCode::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.ResourceResultCode.msg)
}
inline void ResourceResultCode::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.ResourceResultCode.msg)
}
inline void ResourceResultCode::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.ResourceResultCode.msg)
}
inline std::string* ResourceResultCode::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceResultCode::release_msg() {
  // @@protoc_insertion_point(field_release:crushed.ResourceResultCode.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceResultCode::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.ResourceResultCode.msg)
}
inline std::string* ResourceResultCode::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.ResourceResultCode.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourceResultCode::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ResourceResultCode.msg)
}

// -------------------------------------------------------------------

// ResourceRequest

// bytes path = 1;
inline void ResourceRequest::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourceRequest::path() const {
  // @@protoc_insertion_point(field_get:crushed.ResourceRequest.path)
  return _internal_path();
}
inline void ResourceRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:crushed.ResourceRequest.path)
}
inline std::string* ResourceRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:crushed.ResourceRequest.path)
  return _internal_mutable_path();
}
inline const std::string& ResourceRequest::_internal_path() const {
  return path_.Get();
}
inline void ResourceRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceRequest::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.ResourceRequest.path)
}
inline void ResourceRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.ResourceRequest.path)
}
inline void ResourceRequest::set_path(const void* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.ResourceRequest.path)
}
inline std::string* ResourceRequest::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceRequest::release_path() {
  // @@protoc_insertion_point(field_release:crushed.ResourceRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.ResourceRequest.path)
}
inline std::string* ResourceRequest::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.ResourceRequest.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourceRequest::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ResourceRequest.path)
}

// -------------------------------------------------------------------

// ResourceResponse

// .crushed.ResourceResultCode result = 1;
inline bool ResourceResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResourceResponse::has_result() const {
  return _internal_has_result();
}
inline void ResourceResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::ResourceResultCode& ResourceResponse::_internal_result() const {
  const ::crushed::ResourceResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::ResourceResultCode*>(
      &::crushed::_ResourceResultCode_default_instance_);
}
inline const ::crushed::ResourceResultCode& ResourceResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.ResourceResponse.result)
  return _internal_result();
}
inline void ResourceResponse::unsafe_arena_set_allocated_result(
    ::crushed::ResourceResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ResourceResponse.result)
}
inline ::crushed::ResourceResultCode* ResourceResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::ResourceResultCode* ResourceResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.ResourceResponse.result)
  
  ::crushed::ResourceResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::ResourceResultCode* ResourceResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::ResourceResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::ResourceResultCode* ResourceResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.ResourceResponse.result)
  return _internal_mutable_result();
}
inline void ResourceResponse::set_allocated_result(::crushed::ResourceResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.ResourceResponse.result)
}

// bytes responseMessage = 2;
inline void ResourceResponse::clear_responsemessage() {
  responsemessage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourceResponse::responsemessage() const {
  // @@protoc_insertion_point(field_get:crushed.ResourceResponse.responseMessage)
  return _internal_responsemessage();
}
inline void ResourceResponse::set_responsemessage(const std::string& value) {
  _internal_set_responsemessage(value);
  // @@protoc_insertion_point(field_set:crushed.ResourceResponse.responseMessage)
}
inline std::string* ResourceResponse::mutable_responsemessage() {
  // @@protoc_insertion_point(field_mutable:crushed.ResourceResponse.responseMessage)
  return _internal_mutable_responsemessage();
}
inline const std::string& ResourceResponse::_internal_responsemessage() const {
  return responsemessage_.Get();
}
inline void ResourceResponse::_internal_set_responsemessage(const std::string& value) {
  
  responsemessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceResponse::set_responsemessage(std::string&& value) {
  
  responsemessage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.ResourceResponse.responseMessage)
}
inline void ResourceResponse::set_responsemessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  responsemessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.ResourceResponse.responseMessage)
}
inline void ResourceResponse::set_responsemessage(const void* value,
    size_t size) {
  
  responsemessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.ResourceResponse.responseMessage)
}
inline std::string* ResourceResponse::_internal_mutable_responsemessage() {
  
  return responsemessage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceResponse::release_responsemessage() {
  // @@protoc_insertion_point(field_release:crushed.ResourceResponse.responseMessage)
  return responsemessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceResponse::set_allocated_responsemessage(std::string* responsemessage) {
  if (responsemessage != nullptr) {
    
  } else {
    
  }
  responsemessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responsemessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.ResourceResponse.responseMessage)
}
inline std::string* ResourceResponse::unsafe_arena_release_responsemessage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.ResourceResponse.responseMessage)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return responsemessage_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourceResponse::unsafe_arena_set_allocated_responsemessage(
    std::string* responsemessage) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (responsemessage != nullptr) {
    
  } else {
    
  }
  responsemessage_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      responsemessage, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ResourceResponse.responseMessage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace crushed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_resource_2eproto
