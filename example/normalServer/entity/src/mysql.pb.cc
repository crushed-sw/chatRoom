// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.proto

#include "../include/mysql.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysql_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMessage_mysql_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlResultCode_mysql_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomUser_mysql_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rooms_mysql_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysql_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_mysql_2eproto;
namespace crushed {
class MysqlResultCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MysqlResultCode> _instance;
} _MysqlResultCode_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class RoomsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rooms> _instance;
} _Rooms_default_instance_;
class RoomUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomUser> _instance;
} _RoomUser_default_instance_;
class ChatMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMessage> _instance;
} _ChatMessage_default_instance_;
class UserQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserQueryRequest> _instance;
} _UserQueryRequest_default_instance_;
class UserQueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserQueryResponse> _instance;
} _UserQueryResponse_default_instance_;
class UserInsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInsertRequest> _instance;
} _UserInsertRequest_default_instance_;
class UserInsertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInsertResponse> _instance;
} _UserInsertResponse_default_instance_;
class RoomQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryRequest> _instance;
} _RoomQueryRequest_default_instance_;
class RoomQueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryResponse> _instance;
} _RoomQueryResponse_default_instance_;
class RoomQueryLastRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryLastRequest> _instance;
} _RoomQueryLastRequest_default_instance_;
class RoomQueryLastResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryLastResponse> _instance;
} _RoomQueryLastResponse_default_instance_;
class RoomInsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomInsertRequest> _instance;
} _RoomInsertRequest_default_instance_;
class RoomInsertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomInsertResponse> _instance;
} _RoomInsertResponse_default_instance_;
class RoomRemoveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomRemoveRequest> _instance;
} _RoomRemoveRequest_default_instance_;
class RoomRemoveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomRemoveResponse> _instance;
} _RoomRemoveResponse_default_instance_;
class RoomQueryAllRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryAllRequest> _instance;
} _RoomQueryAllRequest_default_instance_;
class RoomQueryAllResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryAllResponse> _instance;
} _RoomQueryAllResponse_default_instance_;
class RoomQueryByNameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryByNameRequest> _instance;
} _RoomQueryByNameRequest_default_instance_;
class RoomQueryByNameResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryByNameResponse> _instance;
} _RoomQueryByNameResponse_default_instance_;
class RoomQueryAllByNameRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryAllByNameRequest> _instance;
} _RoomQueryAllByNameRequest_default_instance_;
class RoomQueryAllByNameResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomQueryAllByNameResponse> _instance;
} _RoomQueryAllByNameResponse_default_instance_;
class ChatMessageInsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMessageInsertRequest> _instance;
} _ChatMessageInsertRequest_default_instance_;
class ChatMessageInsertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMessageInsertResponse> _instance;
} _ChatMessageInsertResponse_default_instance_;
}  // namespace crushed
static void InitDefaultsscc_info_ChatMessage_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_ChatMessage_default_instance_;
    new (ptr) ::crushed::ChatMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::ChatMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMessage_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatMessage_mysql_2eproto}, {}};

static void InitDefaultsscc_info_ChatMessageInsertRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_ChatMessageInsertRequest_default_instance_;
    new (ptr) ::crushed::ChatMessageInsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::ChatMessageInsertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatMessageInsertRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChatMessageInsertRequest_mysql_2eproto}, {
      &scc_info_ChatMessage_mysql_2eproto.base,}};

static void InitDefaultsscc_info_ChatMessageInsertResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_ChatMessageInsertResponse_default_instance_;
    new (ptr) ::crushed::ChatMessageInsertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::ChatMessageInsertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatMessageInsertResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChatMessageInsertResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,}};

static void InitDefaultsscc_info_MysqlResultCode_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_MysqlResultCode_default_instance_;
    new (ptr) ::crushed::MysqlResultCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::MysqlResultCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MysqlResultCode_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MysqlResultCode_mysql_2eproto}, {}};

static void InitDefaultsscc_info_RoomInsertRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomInsertRequest_default_instance_;
    new (ptr) ::crushed::RoomInsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomInsertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomInsertRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomInsertRequest_mysql_2eproto}, {
      &scc_info_Rooms_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomInsertResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomInsertResponse_default_instance_;
    new (ptr) ::crushed::RoomInsertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomInsertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomInsertResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomInsertResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomQueryAllByNameRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryAllByNameRequest_default_instance_;
    new (ptr) ::crushed::RoomQueryAllByNameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryAllByNameRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomQueryAllByNameRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomQueryAllByNameRequest_mysql_2eproto}, {}};

static void InitDefaultsscc_info_RoomQueryAllByNameResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryAllByNameResponse_default_instance_;
    new (ptr) ::crushed::RoomQueryAllByNameResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryAllByNameResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomQueryAllByNameResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoomQueryAllByNameResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,
      &scc_info_RoomUser_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomQueryAllRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryAllRequest_default_instance_;
    new (ptr) ::crushed::RoomQueryAllRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryAllRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomQueryAllRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomQueryAllRequest_mysql_2eproto}, {}};

static void InitDefaultsscc_info_RoomQueryAllResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryAllResponse_default_instance_;
    new (ptr) ::crushed::RoomQueryAllResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryAllResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomQueryAllResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoomQueryAllResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,
      &scc_info_Rooms_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomQueryByNameRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryByNameRequest_default_instance_;
    new (ptr) ::crushed::RoomQueryByNameRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryByNameRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomQueryByNameRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomQueryByNameRequest_mysql_2eproto}, {}};

static void InitDefaultsscc_info_RoomQueryByNameResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryByNameResponse_default_instance_;
    new (ptr) ::crushed::RoomQueryByNameResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryByNameResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomQueryByNameResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoomQueryByNameResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,
      &scc_info_RoomUser_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomQueryLastRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryLastRequest_default_instance_;
    new (ptr) ::crushed::RoomQueryLastRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryLastRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomQueryLastRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomQueryLastRequest_mysql_2eproto}, {}};

static void InitDefaultsscc_info_RoomQueryLastResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryLastResponse_default_instance_;
    new (ptr) ::crushed::RoomQueryLastResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryLastResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomQueryLastResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoomQueryLastResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,
      &scc_info_Rooms_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomQueryRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryRequest_default_instance_;
    new (ptr) ::crushed::RoomQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomQueryRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomQueryRequest_mysql_2eproto}, {}};

static void InitDefaultsscc_info_RoomQueryResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomQueryResponse_default_instance_;
    new (ptr) ::crushed::RoomQueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomQueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoomQueryResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoomQueryResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,
      &scc_info_Rooms_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomRemoveRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomRemoveRequest_default_instance_;
    new (ptr) ::crushed::RoomRemoveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomRemoveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomRemoveRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomRemoveRequest_mysql_2eproto}, {}};

static void InitDefaultsscc_info_RoomRemoveResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomRemoveResponse_default_instance_;
    new (ptr) ::crushed::RoomRemoveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomRemoveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomRemoveResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomRemoveResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,}};

static void InitDefaultsscc_info_RoomUser_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_RoomUser_default_instance_;
    new (ptr) ::crushed::RoomUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::RoomUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomUser_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomUser_mysql_2eproto}, {}};

static void InitDefaultsscc_info_Rooms_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_Rooms_default_instance_;
    new (ptr) ::crushed::Rooms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::Rooms::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rooms_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rooms_mysql_2eproto}, {}};

static void InitDefaultsscc_info_User_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_User_default_instance_;
    new (ptr) ::crushed::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_User_mysql_2eproto}, {}};

static void InitDefaultsscc_info_UserInsertRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_UserInsertRequest_default_instance_;
    new (ptr) ::crushed::UserInsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::UserInsertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInsertRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserInsertRequest_mysql_2eproto}, {
      &scc_info_User_mysql_2eproto.base,}};

static void InitDefaultsscc_info_UserInsertResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_UserInsertResponse_default_instance_;
    new (ptr) ::crushed::UserInsertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::UserInsertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInsertResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserInsertResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,}};

static void InitDefaultsscc_info_UserQueryRequest_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_UserQueryRequest_default_instance_;
    new (ptr) ::crushed::UserQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::UserQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserQueryRequest_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserQueryRequest_mysql_2eproto}, {}};

static void InitDefaultsscc_info_UserQueryResponse_mysql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crushed::_UserQueryResponse_default_instance_;
    new (ptr) ::crushed::UserQueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crushed::UserQueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserQueryResponse_mysql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserQueryResponse_mysql_2eproto}, {
      &scc_info_MysqlResultCode_mysql_2eproto.base,
      &scc_info_User_mysql_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mysql_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mysql_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_mysql_2eproto[3];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mysql_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::MysqlResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::MysqlResultCode, code_),
  PROTOBUF_FIELD_OFFSET(::crushed::MysqlResultCode, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::User, userid_),
  PROTOBUF_FIELD_OFFSET(::crushed::User, username_),
  PROTOBUF_FIELD_OFFSET(::crushed::User, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::Rooms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::Rooms, roomid_),
  PROTOBUF_FIELD_OFFSET(::crushed::Rooms, roomname_),
  PROTOBUF_FIELD_OFFSET(::crushed::Rooms, roomuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomUser, roomid_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomUser, roomname_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomUser, roomuser_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomUser, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessage, chatid_),
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessage, roomid_),
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessage, userid_),
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessage, sendtime_),
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::UserQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::UserQueryRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::UserQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::UserQueryResponse, result_),
  PROTOBUF_FIELD_OFFSET(::crushed::UserQueryResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::UserInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::UserInsertRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::UserInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::UserInsertResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryRequest, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryResponse, result_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryResponse, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryLastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryLastRequest, roomname_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryLastRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryLastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryLastResponse, result_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryLastResponse, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomInsertRequest, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomInsertResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomRemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomRemoveRequest, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomRemoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomRemoveResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllResponse, result_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllResponse, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryByNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryByNameRequest, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryByNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryByNameResponse, result_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryByNameResponse, roomuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllByNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllByNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllByNameResponse, result_),
  PROTOBUF_FIELD_OFFSET(::crushed::RoomQueryAllByNameResponse, roomuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessageInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessageInsertRequest, chatmessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessageInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crushed::ChatMessageInsertResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::crushed::MysqlResultCode)},
  { 7, -1, sizeof(::crushed::User)},
  { 15, -1, sizeof(::crushed::Rooms)},
  { 23, -1, sizeof(::crushed::RoomUser)},
  { 32, -1, sizeof(::crushed::ChatMessage)},
  { 42, -1, sizeof(::crushed::UserQueryRequest)},
  { 48, -1, sizeof(::crushed::UserQueryResponse)},
  { 55, -1, sizeof(::crushed::UserInsertRequest)},
  { 61, -1, sizeof(::crushed::UserInsertResponse)},
  { 67, -1, sizeof(::crushed::RoomQueryRequest)},
  { 73, -1, sizeof(::crushed::RoomQueryResponse)},
  { 80, -1, sizeof(::crushed::RoomQueryLastRequest)},
  { 87, -1, sizeof(::crushed::RoomQueryLastResponse)},
  { 94, -1, sizeof(::crushed::RoomInsertRequest)},
  { 100, -1, sizeof(::crushed::RoomInsertResponse)},
  { 106, -1, sizeof(::crushed::RoomRemoveRequest)},
  { 112, -1, sizeof(::crushed::RoomRemoveResponse)},
  { 118, -1, sizeof(::crushed::RoomQueryAllRequest)},
  { 123, -1, sizeof(::crushed::RoomQueryAllResponse)},
  { 130, -1, sizeof(::crushed::RoomQueryByNameRequest)},
  { 136, -1, sizeof(::crushed::RoomQueryByNameResponse)},
  { 143, -1, sizeof(::crushed::RoomQueryAllByNameRequest)},
  { 148, -1, sizeof(::crushed::RoomQueryAllByNameResponse)},
  { 155, -1, sizeof(::crushed::ChatMessageInsertRequest)},
  { 161, -1, sizeof(::crushed::ChatMessageInsertResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_MysqlResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_Rooms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_ChatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_UserQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_UserQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_UserInsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_UserInsertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryLastRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryLastResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomInsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomInsertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomRemoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomRemoveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryAllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryAllResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryByNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryByNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryAllByNameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_RoomQueryAllByNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_ChatMessageInsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crushed::_ChatMessageInsertResponse_default_instance_),
};

const char descriptor_table_protodef_mysql_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013mysql.proto\022\007crushed\",\n\017MysqlResultCod"
  "e\022\014\n\004code\030\001 \001(\005\022\013\n\003msg\030\002 \001(\014\":\n\004User\022\016\n\006"
  "userid\030\001 \001(\005\022\020\n\010username\030\002 \001(\014\022\020\n\010passwo"
  "rd\030\003 \001(\014\";\n\005Rooms\022\016\n\006roomid\030\001 \001(\005\022\020\n\010roo"
  "mname\030\002 \001(\014\022\020\n\010roomuser\030\003 \001(\005\"P\n\010RoomUse"
  "r\022\016\n\006roomid\030\001 \001(\005\022\020\n\010roomname\030\002 \001(\014\022\020\n\010r"
  "oomuser\030\003 \001(\005\022\020\n\010username\030\004 \001(\014\"`\n\013ChatM"
  "essage\022\016\n\006chatid\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005\022\016"
  "\n\006userid\030\003 \001(\005\022\020\n\010sendtime\030\004 \001(\014\022\017\n\007mess"
  "age\030\005 \001(\014\"\"\n\020UserQueryRequest\022\016\n\006userid\030"
  "\001 \001(\005\"Z\n\021UserQueryResponse\022(\n\006result\030\001 \001"
  "(\0132\030.crushed.MysqlResultCode\022\033\n\004user\030\002 \001"
  "(\0132\r.crushed.User\"0\n\021UserInsertRequest\022\033"
  "\n\004user\030\001 \001(\0132\r.crushed.User\">\n\022UserInser"
  "tResponse\022(\n\006result\030\001 \001(\0132\030.crushed.Mysq"
  "lResultCode\"\"\n\020RoomQueryRequest\022\016\n\006roomi"
  "d\030\001 \001(\005\"\\\n\021RoomQueryResponse\022(\n\006result\030\001"
  " \001(\0132\030.crushed.MysqlResultCode\022\035\n\005rooms\030"
  "\002 \001(\0132\016.crushed.Rooms\"8\n\024RoomQueryLastRe"
  "quest\022\020\n\010roomname\030\001 \001(\014\022\016\n\006userid\030\002 \001(\005\""
  "`\n\025RoomQueryLastResponse\022(\n\006result\030\001 \001(\013"
  "2\030.crushed.MysqlResultCode\022\035\n\005rooms\030\002 \001("
  "\0132\016.crushed.Rooms\"2\n\021RoomInsertRequest\022\035"
  "\n\005rooms\030\001 \001(\0132\016.crushed.Rooms\">\n\022RoomIns"
  "ertResponse\022(\n\006result\030\001 \001(\0132\030.crushed.My"
  "sqlResultCode\"#\n\021RoomRemoveRequest\022\016\n\006ro"
  "omid\030\001 \001(\005\">\n\022RoomRemoveResponse\022(\n\006resu"
  "lt\030\001 \001(\0132\030.crushed.MysqlResultCode\"\025\n\023Ro"
  "omQueryAllRequest\"_\n\024RoomQueryAllRespons"
  "e\022(\n\006result\030\001 \001(\0132\030.crushed.MysqlResultC"
  "ode\022\035\n\005rooms\030\002 \003(\0132\016.crushed.Rooms\"(\n\026Ro"
  "omQueryByNameRequest\022\016\n\006roomid\030\001 \001(\005\"h\n\027"
  "RoomQueryByNameResponse\022(\n\006result\030\001 \001(\0132"
  "\030.crushed.MysqlResultCode\022#\n\010roomuser\030\002 "
  "\001(\0132\021.crushed.RoomUser\"\033\n\031RoomQueryAllBy"
  "NameRequest\"k\n\032RoomQueryAllByNameRespons"
  "e\022(\n\006result\030\001 \001(\0132\030.crushed.MysqlResultC"
  "ode\022#\n\010roomuser\030\002 \003(\0132\021.crushed.RoomUser"
  "\"E\n\030ChatMessageInsertRequest\022)\n\013chatmess"
  "age\030\001 \001(\0132\024.crushed.ChatMessage\"E\n\031ChatM"
  "essageInsertResponse\022(\n\006result\030\001 \001(\0132\030.c"
  "rushed.MysqlResultCode2\237\001\n\022UserMappingSe"
  "rvice\022B\n\tqueryUser\022\031.crushed.UserQueryRe"
  "quest\032\032.crushed.UserQueryResponse\022E\n\nins"
  "ertUser\022\032.crushed.UserInsertRequest\032\033.cr"
  "ushed.UserInsertResponse2\260\004\n\022RoomMapping"
  "Service\022B\n\tqueryRoom\022\031.crushed.RoomQuery"
  "Request\032\032.crushed.RoomQueryResponse\022N\n\rq"
  "ueryLastRoom\022\035.crushed.RoomQueryLastRequ"
  "est\032\036.crushed.RoomQueryLastResponse\022E\n\ni"
  "nsertRoom\022\032.crushed.RoomInsertRequest\032\033."
  "crushed.RoomInsertResponse\022E\n\nremoveRoom"
  "\022\032.crushed.RoomRemoveRequest\032\033.crushed.R"
  "oomRemoveResponse\022K\n\014queryAllRoom\022\034.crus"
  "hed.RoomQueryAllRequest\032\035.crushed.RoomQu"
  "eryAllResponse\022P\n\013queryByName\022\037.crushed."
  "RoomQueryByNameRequest\032 .crushed.RoomQue"
  "ryByNameResponse\022Y\n\016queryAllByName\022\".cru"
  "shed.RoomQueryAllByNameRequest\032#.crushed"
  ".RoomQueryAllByNameResponse2x\n\032ChatMessa"
  "geMappinngService\022Z\n\021insertChatMessage\022!"
  ".crushed.ChatMessageInsertRequest\032\".crus"
  "hed.ChatMessageInsertResponseB\003\200\001\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mysql_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mysql_2eproto_sccs[25] = {
  &scc_info_ChatMessage_mysql_2eproto.base,
  &scc_info_ChatMessageInsertRequest_mysql_2eproto.base,
  &scc_info_ChatMessageInsertResponse_mysql_2eproto.base,
  &scc_info_MysqlResultCode_mysql_2eproto.base,
  &scc_info_RoomInsertRequest_mysql_2eproto.base,
  &scc_info_RoomInsertResponse_mysql_2eproto.base,
  &scc_info_RoomQueryAllByNameRequest_mysql_2eproto.base,
  &scc_info_RoomQueryAllByNameResponse_mysql_2eproto.base,
  &scc_info_RoomQueryAllRequest_mysql_2eproto.base,
  &scc_info_RoomQueryAllResponse_mysql_2eproto.base,
  &scc_info_RoomQueryByNameRequest_mysql_2eproto.base,
  &scc_info_RoomQueryByNameResponse_mysql_2eproto.base,
  &scc_info_RoomQueryLastRequest_mysql_2eproto.base,
  &scc_info_RoomQueryLastResponse_mysql_2eproto.base,
  &scc_info_RoomQueryRequest_mysql_2eproto.base,
  &scc_info_RoomQueryResponse_mysql_2eproto.base,
  &scc_info_RoomRemoveRequest_mysql_2eproto.base,
  &scc_info_RoomRemoveResponse_mysql_2eproto.base,
  &scc_info_RoomUser_mysql_2eproto.base,
  &scc_info_Rooms_mysql_2eproto.base,
  &scc_info_User_mysql_2eproto.base,
  &scc_info_UserInsertRequest_mysql_2eproto.base,
  &scc_info_UserInsertResponse_mysql_2eproto.base,
  &scc_info_UserQueryRequest_mysql_2eproto.base,
  &scc_info_UserQueryResponse_mysql_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mysql_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mysql_2eproto = {
  false, false, descriptor_table_protodef_mysql_2eproto, "mysql.proto", 2522,
  &descriptor_table_mysql_2eproto_once, descriptor_table_mysql_2eproto_sccs, descriptor_table_mysql_2eproto_deps, 25, 0,
  schemas, file_default_instances, TableStruct_mysql_2eproto::offsets,
  file_level_metadata_mysql_2eproto, 25, file_level_enum_descriptors_mysql_2eproto, file_level_service_descriptors_mysql_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mysql_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mysql_2eproto)), true);
namespace crushed {

// ===================================================================

void MysqlResultCode::InitAsDefaultInstance() {
}
class MysqlResultCode::_Internal {
 public:
};

MysqlResultCode::MysqlResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.MysqlResultCode)
}
MysqlResultCode::MysqlResultCode(const MysqlResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:crushed.MysqlResultCode)
}

void MysqlResultCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MysqlResultCode_mysql_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

MysqlResultCode::~MysqlResultCode() {
  // @@protoc_insertion_point(destructor:crushed.MysqlResultCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MysqlResultCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MysqlResultCode::ArenaDtor(void* object) {
  MysqlResultCode* _this = reinterpret_cast< MysqlResultCode* >(object);
  (void)_this;
}
void MysqlResultCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MysqlResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MysqlResultCode& MysqlResultCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MysqlResultCode_mysql_2eproto.base);
  return *internal_default_instance();
}


void MysqlResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.MysqlResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MysqlResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MysqlResultCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.MysqlResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.MysqlResultCode)
  return target;
}

size_t MysqlResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.MysqlResultCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MysqlResultCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.MysqlResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  const MysqlResultCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MysqlResultCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.MysqlResultCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.MysqlResultCode)
    MergeFrom(*source);
  }
}

void MysqlResultCode::MergeFrom(const MysqlResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.MysqlResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void MysqlResultCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.MysqlResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlResultCode::CopyFrom(const MysqlResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.MysqlResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlResultCode::IsInitialized() const {
  return true;
}

void MysqlResultCode::InternalSwap(MysqlResultCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MysqlResultCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User::InitAsDefaultInstance() {
}
class User::_Internal {
 public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:crushed.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_mysql_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:crushed.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_mysql_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // bytes username = 2;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_username(), target);
  }

  // bytes password = 3;
  if (this->password().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rooms::InitAsDefaultInstance() {
}
class Rooms::_Internal {
 public:
};

Rooms::Rooms(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.Rooms)
}
Rooms::Rooms(const Rooms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomuser_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(roomuser_));
  // @@protoc_insertion_point(copy_constructor:crushed.Rooms)
}

void Rooms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rooms_mysql_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomuser_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(roomuser_));
}

Rooms::~Rooms() {
  // @@protoc_insertion_point(destructor:crushed.Rooms)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rooms::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rooms::ArenaDtor(void* object) {
  Rooms* _this = reinterpret_cast< Rooms* >(object);
  (void)_this;
}
void Rooms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rooms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rooms& Rooms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rooms_mysql_2eproto.base);
  return *internal_default_instance();
}


void Rooms::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.Rooms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomuser_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(roomuser_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rooms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes roomname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roomuser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roomuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rooms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.Rooms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // bytes roomname = 2;
  if (this->roomname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_roomname(), target);
  }

  // int32 roomuser = 3;
  if (this->roomuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_roomuser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.Rooms)
  return target;
}

size_t Rooms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.Rooms)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes roomname = 2;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_roomname());
  }

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  // int32 roomuser = 3;
  if (this->roomuser() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomuser());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rooms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.Rooms)
  GOOGLE_DCHECK_NE(&from, this);
  const Rooms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rooms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.Rooms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.Rooms)
    MergeFrom(*source);
  }
}

void Rooms::MergeFrom(const Rooms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.Rooms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.roomuser() != 0) {
    _internal_set_roomuser(from._internal_roomuser());
  }
}

void Rooms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.Rooms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rooms::CopyFrom(const Rooms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.Rooms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rooms::IsInitialized() const {
  return true;
}

void Rooms::InternalSwap(Rooms* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rooms, roomuser_)
      + sizeof(Rooms::roomuser_)
      - PROTOBUF_FIELD_OFFSET(Rooms, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rooms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomUser::InitAsDefaultInstance() {
}
class RoomUser::_Internal {
 public:
};

RoomUser::RoomUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomUser)
}
RoomUser::RoomUser(const RoomUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomuser_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(roomuser_));
  // @@protoc_insertion_point(copy_constructor:crushed.RoomUser)
}

void RoomUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomUser_mysql_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomuser_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(roomuser_));
}

RoomUser::~RoomUser() {
  // @@protoc_insertion_point(destructor:crushed.RoomUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomUser::ArenaDtor(void* object) {
  RoomUser* _this = reinterpret_cast< RoomUser* >(object);
  (void)_this;
}
void RoomUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomUser& RoomUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomUser_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomUser::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomuser_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(roomuser_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes roomname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roomuser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roomuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // bytes roomname = 2;
  if (this->roomname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_roomname(), target);
  }

  // int32 roomuser = 3;
  if (this->roomuser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_roomuser(), target);
  }

  // bytes username = 4;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomUser)
  return target;
}

size_t RoomUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes roomname = 2;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_roomname());
  }

  // bytes username = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  // int32 roomuser = 3;
  if (this->roomuser() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomuser());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomUser)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomUser)
    MergeFrom(*source);
  }
}

void RoomUser::MergeFrom(const RoomUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.roomuser() != 0) {
    _internal_set_roomuser(from._internal_roomuser());
  }
}

void RoomUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomUser::CopyFrom(const RoomUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomUser::IsInitialized() const {
  return true;
}

void RoomUser::InternalSwap(RoomUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomUser, roomuser_)
      + sizeof(RoomUser::roomuser_)
      - PROTOBUF_FIELD_OFFSET(RoomUser, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMessage::InitAsDefaultInstance() {
}
class ChatMessage::_Internal {
 public:
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sendtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendtime().empty()) {
    sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sendtime(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&chatid_, &from.chatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&chatid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:crushed.ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMessage_mysql_2eproto.base);
  sendtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&chatid_)) + sizeof(userid_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:crushed.ChatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sendtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatMessage::ArenaDtor(void* object) {
  ChatMessage* _this = reinterpret_cast< ChatMessage* >(object);
  (void)_this;
}
void ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessage& ChatMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMessage_mysql_2eproto.base);
  return *internal_default_instance();
}


void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sendtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&chatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&chatid_)) + sizeof(userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 chatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sendtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sendtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chatid = 1;
  if (this->chatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chatid(), target);
  }

  // int32 roomid = 2;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_roomid(), target);
  }

  // int32 userid = 3;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_userid(), target);
  }

  // bytes sendtime = 4;
  if (this->sendtime().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sendtime(), target);
  }

  // bytes message = 5;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.ChatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sendtime = 4;
  if (this->sendtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendtime());
  }

  // bytes message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 chatid = 1;
  if (this->chatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chatid());
  }

  // int32 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  // int32 userid = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.ChatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime().size() > 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.chatid() != 0) {
    _internal_set_chatid(from._internal_chatid());
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void ChatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sendtime_.Swap(&other->sendtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, userid_)
      + sizeof(ChatMessage::userid_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, chatid_)>(
          reinterpret_cast<char*>(&chatid_),
          reinterpret_cast<char*>(&other->chatid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserQueryRequest::InitAsDefaultInstance() {
}
class UserQueryRequest::_Internal {
 public:
};

UserQueryRequest::UserQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.UserQueryRequest)
}
UserQueryRequest::UserQueryRequest(const UserQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:crushed.UserQueryRequest)
}

void UserQueryRequest::SharedCtor() {
  userid_ = 0;
}

UserQueryRequest::~UserQueryRequest() {
  // @@protoc_insertion_point(destructor:crushed.UserQueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserQueryRequest::ArenaDtor(void* object) {
  UserQueryRequest* _this = reinterpret_cast< UserQueryRequest* >(object);
  (void)_this;
}
void UserQueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserQueryRequest& UserQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserQueryRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void UserQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.UserQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.UserQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.UserQueryRequest)
  return target;
}

size_t UserQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.UserQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.UserQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.UserQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.UserQueryRequest)
    MergeFrom(*source);
  }
}

void UserQueryRequest::MergeFrom(const UserQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.UserQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void UserQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.UserQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQueryRequest::CopyFrom(const UserQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.UserQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQueryRequest::IsInitialized() const {
  return true;
}

void UserQueryRequest::InternalSwap(UserQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserQueryResponse::InitAsDefaultInstance() {
  ::crushed::_UserQueryResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
  ::crushed::_UserQueryResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::crushed::User*>(
      ::crushed::User::internal_default_instance());
}
class UserQueryResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const UserQueryResponse* msg);
  static const ::crushed::User& user(const UserQueryResponse* msg);
};

const ::crushed::MysqlResultCode&
UserQueryResponse::_Internal::result(const UserQueryResponse* msg) {
  return *msg->result_;
}
const ::crushed::User&
UserQueryResponse::_Internal::user(const UserQueryResponse* msg) {
  return *msg->user_;
}
UserQueryResponse::UserQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.UserQueryResponse)
}
UserQueryResponse::UserQueryResponse(const UserQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::crushed::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.UserQueryResponse)
}

void UserQueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserQueryResponse_mysql_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_));
}

UserQueryResponse::~UserQueryResponse() {
  // @@protoc_insertion_point(destructor:crushed.UserQueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete user_;
}

void UserQueryResponse::ArenaDtor(void* object) {
  UserQueryResponse* _this = reinterpret_cast< UserQueryResponse* >(object);
  (void)_this;
}
void UserQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserQueryResponse& UserQueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserQueryResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void UserQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.UserQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .crushed.User user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.UserQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .crushed.User user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.UserQueryResponse)
  return target;
}

size_t UserQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.UserQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .crushed.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.UserQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.UserQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.UserQueryResponse)
    MergeFrom(*source);
  }
}

void UserQueryResponse::MergeFrom(const UserQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.UserQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::crushed::User::MergeFrom(from._internal_user());
  }
}

void UserQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.UserQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQueryResponse::CopyFrom(const UserQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.UserQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQueryResponse::IsInitialized() const {
  return true;
}

void UserQueryResponse::InternalSwap(UserQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserQueryResponse, user_)
      + sizeof(UserQueryResponse::user_)
      - PROTOBUF_FIELD_OFFSET(UserQueryResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInsertRequest::InitAsDefaultInstance() {
  ::crushed::_UserInsertRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::crushed::User*>(
      ::crushed::User::internal_default_instance());
}
class UserInsertRequest::_Internal {
 public:
  static const ::crushed::User& user(const UserInsertRequest* msg);
};

const ::crushed::User&
UserInsertRequest::_Internal::user(const UserInsertRequest* msg) {
  return *msg->user_;
}
UserInsertRequest::UserInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.UserInsertRequest)
}
UserInsertRequest::UserInsertRequest(const UserInsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::crushed::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.UserInsertRequest)
}

void UserInsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInsertRequest_mysql_2eproto.base);
  user_ = nullptr;
}

UserInsertRequest::~UserInsertRequest() {
  // @@protoc_insertion_point(destructor:crushed.UserInsertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UserInsertRequest::ArenaDtor(void* object) {
  UserInsertRequest* _this = reinterpret_cast< UserInsertRequest* >(object);
  (void)_this;
}
void UserInsertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInsertRequest& UserInsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInsertRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void UserInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.UserInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInsertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.UserInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.UserInsertRequest)
  return target;
}

size_t UserInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.UserInsertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.UserInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.UserInsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.UserInsertRequest)
    MergeFrom(*source);
  }
}

void UserInsertRequest::MergeFrom(const UserInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.UserInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::crushed::User::MergeFrom(from._internal_user());
  }
}

void UserInsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.UserInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInsertRequest::CopyFrom(const UserInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.UserInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInsertRequest::IsInitialized() const {
  return true;
}

void UserInsertRequest::InternalSwap(UserInsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInsertResponse::InitAsDefaultInstance() {
  ::crushed::_UserInsertResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
}
class UserInsertResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const UserInsertResponse* msg);
};

const ::crushed::MysqlResultCode&
UserInsertResponse::_Internal::result(const UserInsertResponse* msg) {
  return *msg->result_;
}
UserInsertResponse::UserInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.UserInsertResponse)
}
UserInsertResponse::UserInsertResponse(const UserInsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.UserInsertResponse)
}

void UserInsertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInsertResponse_mysql_2eproto.base);
  result_ = nullptr;
}

UserInsertResponse::~UserInsertResponse() {
  // @@protoc_insertion_point(destructor:crushed.UserInsertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInsertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void UserInsertResponse::ArenaDtor(void* object) {
  UserInsertResponse* _this = reinterpret_cast< UserInsertResponse* >(object);
  (void)_this;
}
void UserInsertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInsertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInsertResponse& UserInsertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInsertResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void UserInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.UserInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInsertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInsertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.UserInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.UserInsertResponse)
  return target;
}

size_t UserInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.UserInsertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInsertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.UserInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInsertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInsertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.UserInsertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.UserInsertResponse)
    MergeFrom(*source);
  }
}

void UserInsertResponse::MergeFrom(const UserInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.UserInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
}

void UserInsertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.UserInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInsertResponse::CopyFrom(const UserInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.UserInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInsertResponse::IsInitialized() const {
  return true;
}

void UserInsertResponse::InternalSwap(UserInsertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInsertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryRequest::InitAsDefaultInstance() {
}
class RoomQueryRequest::_Internal {
 public:
};

RoomQueryRequest::RoomQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryRequest)
}
RoomQueryRequest::RoomQueryRequest(const RoomQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryRequest)
}

void RoomQueryRequest::SharedCtor() {
  roomid_ = 0;
}

RoomQueryRequest::~RoomQueryRequest() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoomQueryRequest::ArenaDtor(void* object) {
  RoomQueryRequest* _this = reinterpret_cast< RoomQueryRequest* >(object);
  (void)_this;
}
void RoomQueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryRequest& RoomQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryRequest)
  return target;
}

size_t RoomQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryRequest)
    MergeFrom(*source);
  }
}

void RoomQueryRequest::MergeFrom(const RoomQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
}

void RoomQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryRequest::CopyFrom(const RoomQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryRequest::IsInitialized() const {
  return true;
}

void RoomQueryRequest::InternalSwap(RoomQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryResponse::InitAsDefaultInstance() {
  ::crushed::_RoomQueryResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
  ::crushed::_RoomQueryResponse_default_instance_._instance.get_mutable()->rooms_ = const_cast< ::crushed::Rooms*>(
      ::crushed::Rooms::internal_default_instance());
}
class RoomQueryResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const RoomQueryResponse* msg);
  static const ::crushed::Rooms& rooms(const RoomQueryResponse* msg);
};

const ::crushed::MysqlResultCode&
RoomQueryResponse::_Internal::result(const RoomQueryResponse* msg) {
  return *msg->result_;
}
const ::crushed::Rooms&
RoomQueryResponse::_Internal::rooms(const RoomQueryResponse* msg) {
  return *msg->rooms_;
}
RoomQueryResponse::RoomQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryResponse)
}
RoomQueryResponse::RoomQueryResponse(const RoomQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_rooms()) {
    rooms_ = new ::crushed::Rooms(*from.rooms_);
  } else {
    rooms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryResponse)
}

void RoomQueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomQueryResponse_mysql_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rooms_) -
      reinterpret_cast<char*>(&result_)) + sizeof(rooms_));
}

RoomQueryResponse::~RoomQueryResponse() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete rooms_;
}

void RoomQueryResponse::ArenaDtor(void* object) {
  RoomQueryResponse* _this = reinterpret_cast< RoomQueryResponse* >(object);
  (void)_this;
}
void RoomQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryResponse& RoomQueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && rooms_ != nullptr) {
    delete rooms_;
  }
  rooms_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .crushed.Rooms rooms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rooms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .crushed.Rooms rooms = 2;
  if (this->has_rooms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rooms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryResponse)
  return target;
}

size_t RoomQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .crushed.Rooms rooms = 2;
  if (this->has_rooms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rooms_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryResponse)
    MergeFrom(*source);
  }
}

void RoomQueryResponse::MergeFrom(const RoomQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
  if (from.has_rooms()) {
    _internal_mutable_rooms()->::crushed::Rooms::MergeFrom(from._internal_rooms());
  }
}

void RoomQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryResponse::CopyFrom(const RoomQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryResponse::IsInitialized() const {
  return true;
}

void RoomQueryResponse::InternalSwap(RoomQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomQueryResponse, rooms_)
      + sizeof(RoomQueryResponse::rooms_)
      - PROTOBUF_FIELD_OFFSET(RoomQueryResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryLastRequest::InitAsDefaultInstance() {
}
class RoomQueryLastRequest::_Internal {
 public:
};

RoomQueryLastRequest::RoomQueryLastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryLastRequest)
}
RoomQueryLastRequest::RoomQueryLastRequest(const RoomQueryLastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomname().empty()) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomname(),
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryLastRequest)
}

void RoomQueryLastRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomQueryLastRequest_mysql_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

RoomQueryLastRequest::~RoomQueryLastRequest() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryLastRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryLastRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomQueryLastRequest::ArenaDtor(void* object) {
  RoomQueryLastRequest* _this = reinterpret_cast< RoomQueryLastRequest* >(object);
  (void)_this;
}
void RoomQueryLastRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryLastRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryLastRequest& RoomQueryLastRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryLastRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryLastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryLastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryLastRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes roomname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryLastRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryLastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes roomname = 1;
  if (this->roomname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryLastRequest)
  return target;
}

size_t RoomQueryLastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryLastRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes roomname = 1;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_roomname());
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryLastRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryLastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryLastRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryLastRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryLastRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryLastRequest)
    MergeFrom(*source);
  }
}

void RoomQueryLastRequest::MergeFrom(const RoomQueryLastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryLastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void RoomQueryLastRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryLastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryLastRequest::CopyFrom(const RoomQueryLastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryLastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryLastRequest::IsInitialized() const {
  return true;
}

void RoomQueryLastRequest::InternalSwap(RoomQueryLastRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryLastRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryLastResponse::InitAsDefaultInstance() {
  ::crushed::_RoomQueryLastResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
  ::crushed::_RoomQueryLastResponse_default_instance_._instance.get_mutable()->rooms_ = const_cast< ::crushed::Rooms*>(
      ::crushed::Rooms::internal_default_instance());
}
class RoomQueryLastResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const RoomQueryLastResponse* msg);
  static const ::crushed::Rooms& rooms(const RoomQueryLastResponse* msg);
};

const ::crushed::MysqlResultCode&
RoomQueryLastResponse::_Internal::result(const RoomQueryLastResponse* msg) {
  return *msg->result_;
}
const ::crushed::Rooms&
RoomQueryLastResponse::_Internal::rooms(const RoomQueryLastResponse* msg) {
  return *msg->rooms_;
}
RoomQueryLastResponse::RoomQueryLastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryLastResponse)
}
RoomQueryLastResponse::RoomQueryLastResponse(const RoomQueryLastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_rooms()) {
    rooms_ = new ::crushed::Rooms(*from.rooms_);
  } else {
    rooms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryLastResponse)
}

void RoomQueryLastResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomQueryLastResponse_mysql_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rooms_) -
      reinterpret_cast<char*>(&result_)) + sizeof(rooms_));
}

RoomQueryLastResponse::~RoomQueryLastResponse() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryLastResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryLastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete rooms_;
}

void RoomQueryLastResponse::ArenaDtor(void* object) {
  RoomQueryLastResponse* _this = reinterpret_cast< RoomQueryLastResponse* >(object);
  (void)_this;
}
void RoomQueryLastResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryLastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryLastResponse& RoomQueryLastResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryLastResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryLastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryLastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && rooms_ != nullptr) {
    delete rooms_;
  }
  rooms_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryLastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .crushed.Rooms rooms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rooms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryLastResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryLastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .crushed.Rooms rooms = 2;
  if (this->has_rooms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rooms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryLastResponse)
  return target;
}

size_t RoomQueryLastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryLastResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .crushed.Rooms rooms = 2;
  if (this->has_rooms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rooms_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryLastResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryLastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryLastResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryLastResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryLastResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryLastResponse)
    MergeFrom(*source);
  }
}

void RoomQueryLastResponse::MergeFrom(const RoomQueryLastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryLastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
  if (from.has_rooms()) {
    _internal_mutable_rooms()->::crushed::Rooms::MergeFrom(from._internal_rooms());
  }
}

void RoomQueryLastResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryLastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryLastResponse::CopyFrom(const RoomQueryLastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryLastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryLastResponse::IsInitialized() const {
  return true;
}

void RoomQueryLastResponse::InternalSwap(RoomQueryLastResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomQueryLastResponse, rooms_)
      + sizeof(RoomQueryLastResponse::rooms_)
      - PROTOBUF_FIELD_OFFSET(RoomQueryLastResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryLastResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomInsertRequest::InitAsDefaultInstance() {
  ::crushed::_RoomInsertRequest_default_instance_._instance.get_mutable()->rooms_ = const_cast< ::crushed::Rooms*>(
      ::crushed::Rooms::internal_default_instance());
}
class RoomInsertRequest::_Internal {
 public:
  static const ::crushed::Rooms& rooms(const RoomInsertRequest* msg);
};

const ::crushed::Rooms&
RoomInsertRequest::_Internal::rooms(const RoomInsertRequest* msg) {
  return *msg->rooms_;
}
RoomInsertRequest::RoomInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomInsertRequest)
}
RoomInsertRequest::RoomInsertRequest(const RoomInsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rooms()) {
    rooms_ = new ::crushed::Rooms(*from.rooms_);
  } else {
    rooms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomInsertRequest)
}

void RoomInsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomInsertRequest_mysql_2eproto.base);
  rooms_ = nullptr;
}

RoomInsertRequest::~RoomInsertRequest() {
  // @@protoc_insertion_point(destructor:crushed.RoomInsertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomInsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rooms_;
}

void RoomInsertRequest::ArenaDtor(void* object) {
  RoomInsertRequest* _this = reinterpret_cast< RoomInsertRequest* >(object);
  (void)_this;
}
void RoomInsertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomInsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInsertRequest& RoomInsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomInsertRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rooms_ != nullptr) {
    delete rooms_;
  }
  rooms_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.Rooms rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rooms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomInsertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.Rooms rooms = 1;
  if (this->has_rooms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rooms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomInsertRequest)
  return target;
}

size_t RoomInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomInsertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.Rooms rooms = 1;
  if (this->has_rooms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rooms_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomInsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomInsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomInsertRequest)
    MergeFrom(*source);
  }
}

void RoomInsertRequest::MergeFrom(const RoomInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rooms()) {
    _internal_mutable_rooms()->::crushed::Rooms::MergeFrom(from._internal_rooms());
  }
}

void RoomInsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInsertRequest::CopyFrom(const RoomInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInsertRequest::IsInitialized() const {
  return true;
}

void RoomInsertRequest::InternalSwap(RoomInsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rooms_, other->rooms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomInsertResponse::InitAsDefaultInstance() {
  ::crushed::_RoomInsertResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
}
class RoomInsertResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const RoomInsertResponse* msg);
};

const ::crushed::MysqlResultCode&
RoomInsertResponse::_Internal::result(const RoomInsertResponse* msg) {
  return *msg->result_;
}
RoomInsertResponse::RoomInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomInsertResponse)
}
RoomInsertResponse::RoomInsertResponse(const RoomInsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomInsertResponse)
}

void RoomInsertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomInsertResponse_mysql_2eproto.base);
  result_ = nullptr;
}

RoomInsertResponse::~RoomInsertResponse() {
  // @@protoc_insertion_point(destructor:crushed.RoomInsertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomInsertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void RoomInsertResponse::ArenaDtor(void* object) {
  RoomInsertResponse* _this = reinterpret_cast< RoomInsertResponse* >(object);
  (void)_this;
}
void RoomInsertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomInsertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInsertResponse& RoomInsertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomInsertResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInsertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomInsertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomInsertResponse)
  return target;
}

size_t RoomInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomInsertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInsertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInsertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomInsertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomInsertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomInsertResponse)
    MergeFrom(*source);
  }
}

void RoomInsertResponse::MergeFrom(const RoomInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
}

void RoomInsertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInsertResponse::CopyFrom(const RoomInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInsertResponse::IsInitialized() const {
  return true;
}

void RoomInsertResponse::InternalSwap(RoomInsertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInsertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomRemoveRequest::InitAsDefaultInstance() {
}
class RoomRemoveRequest::_Internal {
 public:
};

RoomRemoveRequest::RoomRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomRemoveRequest)
}
RoomRemoveRequest::RoomRemoveRequest(const RoomRemoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:crushed.RoomRemoveRequest)
}

void RoomRemoveRequest::SharedCtor() {
  roomid_ = 0;
}

RoomRemoveRequest::~RoomRemoveRequest() {
  // @@protoc_insertion_point(destructor:crushed.RoomRemoveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomRemoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoomRemoveRequest::ArenaDtor(void* object) {
  RoomRemoveRequest* _this = reinterpret_cast< RoomRemoveRequest* >(object);
  (void)_this;
}
void RoomRemoveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomRemoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomRemoveRequest& RoomRemoveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomRemoveRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomRemoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomRemoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomRemoveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomRemoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomRemoveRequest)
  return target;
}

size_t RoomRemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomRemoveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomRemoveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomRemoveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomRemoveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomRemoveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomRemoveRequest)
    MergeFrom(*source);
  }
}

void RoomRemoveRequest::MergeFrom(const RoomRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
}

void RoomRemoveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomRemoveRequest::CopyFrom(const RoomRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomRemoveRequest::IsInitialized() const {
  return true;
}

void RoomRemoveRequest::InternalSwap(RoomRemoveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomRemoveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomRemoveResponse::InitAsDefaultInstance() {
  ::crushed::_RoomRemoveResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
}
class RoomRemoveResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const RoomRemoveResponse* msg);
};

const ::crushed::MysqlResultCode&
RoomRemoveResponse::_Internal::result(const RoomRemoveResponse* msg) {
  return *msg->result_;
}
RoomRemoveResponse::RoomRemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomRemoveResponse)
}
RoomRemoveResponse::RoomRemoveResponse(const RoomRemoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomRemoveResponse)
}

void RoomRemoveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomRemoveResponse_mysql_2eproto.base);
  result_ = nullptr;
}

RoomRemoveResponse::~RoomRemoveResponse() {
  // @@protoc_insertion_point(destructor:crushed.RoomRemoveResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomRemoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void RoomRemoveResponse::ArenaDtor(void* object) {
  RoomRemoveResponse* _this = reinterpret_cast< RoomRemoveResponse* >(object);
  (void)_this;
}
void RoomRemoveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomRemoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomRemoveResponse& RoomRemoveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomRemoveResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomRemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomRemoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomRemoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomRemoveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomRemoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomRemoveResponse)
  return target;
}

size_t RoomRemoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomRemoveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomRemoveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomRemoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomRemoveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomRemoveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomRemoveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomRemoveResponse)
    MergeFrom(*source);
  }
}

void RoomRemoveResponse::MergeFrom(const RoomRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomRemoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
}

void RoomRemoveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomRemoveResponse::CopyFrom(const RoomRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomRemoveResponse::IsInitialized() const {
  return true;
}

void RoomRemoveResponse::InternalSwap(RoomRemoveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomRemoveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryAllRequest::InitAsDefaultInstance() {
}
class RoomQueryAllRequest::_Internal {
 public:
};

RoomQueryAllRequest::RoomQueryAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryAllRequest)
}
RoomQueryAllRequest::RoomQueryAllRequest(const RoomQueryAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryAllRequest)
}

void RoomQueryAllRequest::SharedCtor() {
}

RoomQueryAllRequest::~RoomQueryAllRequest() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryAllRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoomQueryAllRequest::ArenaDtor(void* object) {
  RoomQueryAllRequest* _this = reinterpret_cast< RoomQueryAllRequest* >(object);
  (void)_this;
}
void RoomQueryAllRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryAllRequest& RoomQueryAllRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryAllRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryAllRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryAllRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryAllRequest)
  return target;
}

size_t RoomQueryAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryAllRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryAllRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryAllRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryAllRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryAllRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryAllRequest)
    MergeFrom(*source);
  }
}

void RoomQueryAllRequest::MergeFrom(const RoomQueryAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RoomQueryAllRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryAllRequest::CopyFrom(const RoomQueryAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryAllRequest::IsInitialized() const {
  return true;
}

void RoomQueryAllRequest::InternalSwap(RoomQueryAllRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryAllRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryAllResponse::InitAsDefaultInstance() {
  ::crushed::_RoomQueryAllResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
}
class RoomQueryAllResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const RoomQueryAllResponse* msg);
};

const ::crushed::MysqlResultCode&
RoomQueryAllResponse::_Internal::result(const RoomQueryAllResponse* msg) {
  return *msg->result_;
}
RoomQueryAllResponse::RoomQueryAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rooms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryAllResponse)
}
RoomQueryAllResponse::RoomQueryAllResponse(const RoomQueryAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryAllResponse)
}

void RoomQueryAllResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomQueryAllResponse_mysql_2eproto.base);
  result_ = nullptr;
}

RoomQueryAllResponse::~RoomQueryAllResponse() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryAllResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryAllResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void RoomQueryAllResponse::ArenaDtor(void* object) {
  RoomQueryAllResponse* _this = reinterpret_cast< RoomQueryAllResponse* >(object);
  (void)_this;
}
void RoomQueryAllResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryAllResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryAllResponse& RoomQueryAllResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryAllResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_.Clear();
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryAllResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .crushed.Rooms rooms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryAllResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // repeated .crushed.Rooms rooms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rooms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryAllResponse)
  return target;
}

size_t RoomQueryAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryAllResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .crushed.Rooms rooms = 2;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryAllResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryAllResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryAllResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryAllResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryAllResponse)
    MergeFrom(*source);
  }
}

void RoomQueryAllResponse::MergeFrom(const RoomQueryAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
}

void RoomQueryAllResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryAllResponse::CopyFrom(const RoomQueryAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryAllResponse::IsInitialized() const {
  return true;
}

void RoomQueryAllResponse::InternalSwap(RoomQueryAllResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rooms_.InternalSwap(&other->rooms_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryAllResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryByNameRequest::InitAsDefaultInstance() {
}
class RoomQueryByNameRequest::_Internal {
 public:
};

RoomQueryByNameRequest::RoomQueryByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryByNameRequest)
}
RoomQueryByNameRequest::RoomQueryByNameRequest(const RoomQueryByNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryByNameRequest)
}

void RoomQueryByNameRequest::SharedCtor() {
  roomid_ = 0;
}

RoomQueryByNameRequest::~RoomQueryByNameRequest() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryByNameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryByNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoomQueryByNameRequest::ArenaDtor(void* object) {
  RoomQueryByNameRequest* _this = reinterpret_cast< RoomQueryByNameRequest* >(object);
  (void)_this;
}
void RoomQueryByNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryByNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryByNameRequest& RoomQueryByNameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryByNameRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryByNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryByNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryByNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryByNameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryByNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryByNameRequest)
  return target;
}

size_t RoomQueryByNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryByNameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryByNameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryByNameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryByNameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryByNameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryByNameRequest)
    MergeFrom(*source);
  }
}

void RoomQueryByNameRequest::MergeFrom(const RoomQueryByNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
}

void RoomQueryByNameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryByNameRequest::CopyFrom(const RoomQueryByNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryByNameRequest::IsInitialized() const {
  return true;
}

void RoomQueryByNameRequest::InternalSwap(RoomQueryByNameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryByNameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryByNameResponse::InitAsDefaultInstance() {
  ::crushed::_RoomQueryByNameResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
  ::crushed::_RoomQueryByNameResponse_default_instance_._instance.get_mutable()->roomuser_ = const_cast< ::crushed::RoomUser*>(
      ::crushed::RoomUser::internal_default_instance());
}
class RoomQueryByNameResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const RoomQueryByNameResponse* msg);
  static const ::crushed::RoomUser& roomuser(const RoomQueryByNameResponse* msg);
};

const ::crushed::MysqlResultCode&
RoomQueryByNameResponse::_Internal::result(const RoomQueryByNameResponse* msg) {
  return *msg->result_;
}
const ::crushed::RoomUser&
RoomQueryByNameResponse::_Internal::roomuser(const RoomQueryByNameResponse* msg) {
  return *msg->roomuser_;
}
RoomQueryByNameResponse::RoomQueryByNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryByNameResponse)
}
RoomQueryByNameResponse::RoomQueryByNameResponse(const RoomQueryByNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_roomuser()) {
    roomuser_ = new ::crushed::RoomUser(*from.roomuser_);
  } else {
    roomuser_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryByNameResponse)
}

void RoomQueryByNameResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomQueryByNameResponse_mysql_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomuser_) -
      reinterpret_cast<char*>(&result_)) + sizeof(roomuser_));
}

RoomQueryByNameResponse::~RoomQueryByNameResponse() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryByNameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryByNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete roomuser_;
}

void RoomQueryByNameResponse::ArenaDtor(void* object) {
  RoomQueryByNameResponse* _this = reinterpret_cast< RoomQueryByNameResponse* >(object);
  (void)_this;
}
void RoomQueryByNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryByNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryByNameResponse& RoomQueryByNameResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryByNameResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryByNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryByNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && roomuser_ != nullptr) {
    delete roomuser_;
  }
  roomuser_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryByNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .crushed.RoomUser roomuser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryByNameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryByNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .crushed.RoomUser roomuser = 2;
  if (this->has_roomuser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roomuser(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryByNameResponse)
  return target;
}

size_t RoomQueryByNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryByNameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .crushed.RoomUser roomuser = 2;
  if (this->has_roomuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomuser_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryByNameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryByNameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryByNameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryByNameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryByNameResponse)
    MergeFrom(*source);
  }
}

void RoomQueryByNameResponse::MergeFrom(const RoomQueryByNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
  if (from.has_roomuser()) {
    _internal_mutable_roomuser()->::crushed::RoomUser::MergeFrom(from._internal_roomuser());
  }
}

void RoomQueryByNameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryByNameResponse::CopyFrom(const RoomQueryByNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryByNameResponse::IsInitialized() const {
  return true;
}

void RoomQueryByNameResponse::InternalSwap(RoomQueryByNameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomQueryByNameResponse, roomuser_)
      + sizeof(RoomQueryByNameResponse::roomuser_)
      - PROTOBUF_FIELD_OFFSET(RoomQueryByNameResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryByNameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryAllByNameRequest::InitAsDefaultInstance() {
}
class RoomQueryAllByNameRequest::_Internal {
 public:
};

RoomQueryAllByNameRequest::RoomQueryAllByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryAllByNameRequest)
}
RoomQueryAllByNameRequest::RoomQueryAllByNameRequest(const RoomQueryAllByNameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryAllByNameRequest)
}

void RoomQueryAllByNameRequest::SharedCtor() {
}

RoomQueryAllByNameRequest::~RoomQueryAllByNameRequest() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryAllByNameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryAllByNameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoomQueryAllByNameRequest::ArenaDtor(void* object) {
  RoomQueryAllByNameRequest* _this = reinterpret_cast< RoomQueryAllByNameRequest* >(object);
  (void)_this;
}
void RoomQueryAllByNameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryAllByNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryAllByNameRequest& RoomQueryAllByNameRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryAllByNameRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryAllByNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryAllByNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryAllByNameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryAllByNameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryAllByNameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryAllByNameRequest)
  return target;
}

size_t RoomQueryAllByNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryAllByNameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryAllByNameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryAllByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryAllByNameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryAllByNameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryAllByNameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryAllByNameRequest)
    MergeFrom(*source);
  }
}

void RoomQueryAllByNameRequest::MergeFrom(const RoomQueryAllByNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryAllByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RoomQueryAllByNameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryAllByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryAllByNameRequest::CopyFrom(const RoomQueryAllByNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryAllByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryAllByNameRequest::IsInitialized() const {
  return true;
}

void RoomQueryAllByNameRequest::InternalSwap(RoomQueryAllByNameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryAllByNameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomQueryAllByNameResponse::InitAsDefaultInstance() {
  ::crushed::_RoomQueryAllByNameResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
}
class RoomQueryAllByNameResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const RoomQueryAllByNameResponse* msg);
};

const ::crushed::MysqlResultCode&
RoomQueryAllByNameResponse::_Internal::result(const RoomQueryAllByNameResponse* msg) {
  return *msg->result_;
}
RoomQueryAllByNameResponse::RoomQueryAllByNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roomuser_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.RoomQueryAllByNameResponse)
}
RoomQueryAllByNameResponse::RoomQueryAllByNameResponse(const RoomQueryAllByNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roomuser_(from.roomuser_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.RoomQueryAllByNameResponse)
}

void RoomQueryAllByNameResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomQueryAllByNameResponse_mysql_2eproto.base);
  result_ = nullptr;
}

RoomQueryAllByNameResponse::~RoomQueryAllByNameResponse() {
  // @@protoc_insertion_point(destructor:crushed.RoomQueryAllByNameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoomQueryAllByNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void RoomQueryAllByNameResponse::ArenaDtor(void* object) {
  RoomQueryAllByNameResponse* _this = reinterpret_cast< RoomQueryAllByNameResponse* >(object);
  (void)_this;
}
void RoomQueryAllByNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomQueryAllByNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomQueryAllByNameResponse& RoomQueryAllByNameResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomQueryAllByNameResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void RoomQueryAllByNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.RoomQueryAllByNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomuser_.Clear();
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomQueryAllByNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .crushed.RoomUser roomuser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roomuser(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomQueryAllByNameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.RoomQueryAllByNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // repeated .crushed.RoomUser roomuser = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roomuser_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_roomuser(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.RoomQueryAllByNameResponse)
  return target;
}

size_t RoomQueryAllByNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.RoomQueryAllByNameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .crushed.RoomUser roomuser = 2;
  total_size += 1UL * this->_internal_roomuser_size();
  for (const auto& msg : this->roomuser_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomQueryAllByNameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.RoomQueryAllByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomQueryAllByNameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomQueryAllByNameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.RoomQueryAllByNameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.RoomQueryAllByNameResponse)
    MergeFrom(*source);
  }
}

void RoomQueryAllByNameResponse::MergeFrom(const RoomQueryAllByNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.RoomQueryAllByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roomuser_.MergeFrom(from.roomuser_);
  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
}

void RoomQueryAllByNameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.RoomQueryAllByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomQueryAllByNameResponse::CopyFrom(const RoomQueryAllByNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.RoomQueryAllByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomQueryAllByNameResponse::IsInitialized() const {
  return true;
}

void RoomQueryAllByNameResponse::InternalSwap(RoomQueryAllByNameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roomuser_.InternalSwap(&other->roomuser_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomQueryAllByNameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMessageInsertRequest::InitAsDefaultInstance() {
  ::crushed::_ChatMessageInsertRequest_default_instance_._instance.get_mutable()->chatmessage_ = const_cast< ::crushed::ChatMessage*>(
      ::crushed::ChatMessage::internal_default_instance());
}
class ChatMessageInsertRequest::_Internal {
 public:
  static const ::crushed::ChatMessage& chatmessage(const ChatMessageInsertRequest* msg);
};

const ::crushed::ChatMessage&
ChatMessageInsertRequest::_Internal::chatmessage(const ChatMessageInsertRequest* msg) {
  return *msg->chatmessage_;
}
ChatMessageInsertRequest::ChatMessageInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.ChatMessageInsertRequest)
}
ChatMessageInsertRequest::ChatMessageInsertRequest(const ChatMessageInsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chatmessage()) {
    chatmessage_ = new ::crushed::ChatMessage(*from.chatmessage_);
  } else {
    chatmessage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.ChatMessageInsertRequest)
}

void ChatMessageInsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMessageInsertRequest_mysql_2eproto.base);
  chatmessage_ = nullptr;
}

ChatMessageInsertRequest::~ChatMessageInsertRequest() {
  // @@protoc_insertion_point(destructor:crushed.ChatMessageInsertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatMessageInsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chatmessage_;
}

void ChatMessageInsertRequest::ArenaDtor(void* object) {
  ChatMessageInsertRequest* _this = reinterpret_cast< ChatMessageInsertRequest* >(object);
  (void)_this;
}
void ChatMessageInsertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessageInsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessageInsertRequest& ChatMessageInsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMessageInsertRequest_mysql_2eproto.base);
  return *internal_default_instance();
}


void ChatMessageInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.ChatMessageInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && chatmessage_ != nullptr) {
    delete chatmessage_;
  }
  chatmessage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageInsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.ChatMessage chatmessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMessageInsertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.ChatMessageInsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.ChatMessage chatmessage = 1;
  if (this->has_chatmessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chatmessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.ChatMessageInsertRequest)
  return target;
}

size_t ChatMessageInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.ChatMessageInsertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.ChatMessage chatmessage = 1;
  if (this->has_chatmessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chatmessage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessageInsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.ChatMessageInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageInsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMessageInsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.ChatMessageInsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.ChatMessageInsertRequest)
    MergeFrom(*source);
  }
}

void ChatMessageInsertRequest::MergeFrom(const ChatMessageInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.ChatMessageInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chatmessage()) {
    _internal_mutable_chatmessage()->::crushed::ChatMessage::MergeFrom(from._internal_chatmessage());
  }
}

void ChatMessageInsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.ChatMessageInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageInsertRequest::CopyFrom(const ChatMessageInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.ChatMessageInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageInsertRequest::IsInitialized() const {
  return true;
}

void ChatMessageInsertRequest::InternalSwap(ChatMessageInsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(chatmessage_, other->chatmessage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageInsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMessageInsertResponse::InitAsDefaultInstance() {
  ::crushed::_ChatMessageInsertResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::crushed::MysqlResultCode*>(
      ::crushed::MysqlResultCode::internal_default_instance());
}
class ChatMessageInsertResponse::_Internal {
 public:
  static const ::crushed::MysqlResultCode& result(const ChatMessageInsertResponse* msg);
};

const ::crushed::MysqlResultCode&
ChatMessageInsertResponse::_Internal::result(const ChatMessageInsertResponse* msg) {
  return *msg->result_;
}
ChatMessageInsertResponse::ChatMessageInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crushed.ChatMessageInsertResponse)
}
ChatMessageInsertResponse::ChatMessageInsertResponse(const ChatMessageInsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::crushed::MysqlResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:crushed.ChatMessageInsertResponse)
}

void ChatMessageInsertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMessageInsertResponse_mysql_2eproto.base);
  result_ = nullptr;
}

ChatMessageInsertResponse::~ChatMessageInsertResponse() {
  // @@protoc_insertion_point(destructor:crushed.ChatMessageInsertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatMessageInsertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void ChatMessageInsertResponse::ArenaDtor(void* object) {
  ChatMessageInsertResponse* _this = reinterpret_cast< ChatMessageInsertResponse* >(object);
  (void)_this;
}
void ChatMessageInsertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessageInsertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessageInsertResponse& ChatMessageInsertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMessageInsertResponse_mysql_2eproto.base);
  return *internal_default_instance();
}


void ChatMessageInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:crushed.ChatMessageInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageInsertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .crushed.MysqlResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMessageInsertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crushed.ChatMessageInsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crushed.ChatMessageInsertResponse)
  return target;
}

size_t ChatMessageInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crushed.ChatMessageInsertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .crushed.MysqlResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessageInsertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crushed.ChatMessageInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageInsertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMessageInsertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crushed.ChatMessageInsertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crushed.ChatMessageInsertResponse)
    MergeFrom(*source);
  }
}

void ChatMessageInsertResponse::MergeFrom(const ChatMessageInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crushed.ChatMessageInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::crushed::MysqlResultCode::MergeFrom(from._internal_result());
  }
}

void ChatMessageInsertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crushed.ChatMessageInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageInsertResponse::CopyFrom(const ChatMessageInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crushed.ChatMessageInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageInsertResponse::IsInitialized() const {
  return true;
}

void ChatMessageInsertResponse::InternalSwap(ChatMessageInsertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageInsertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserMappingService::~UserMappingService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserMappingService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_2eproto);
  return file_level_service_descriptors_mysql_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserMappingService::GetDescriptor() {
  return descriptor();
}

void UserMappingService::queryUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::UserQueryRequest*,
                         ::crushed::UserQueryResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method queryUser() not implemented.");
  done->Run();
}

void UserMappingService::insertUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::UserInsertRequest*,
                         ::crushed::UserInsertResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method insertUser() not implemented.");
  done->Run();
}

void UserMappingService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_mysql_2eproto[0]);
  switch(method->index()) {
    case 0:
      queryUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::UserQueryRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::UserQueryResponse*>(
                 response),
             done);
      break;
    case 1:
      insertUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::UserInsertRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::UserInsertResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserMappingService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::crushed::UserQueryRequest::default_instance();
    case 1:
      return ::crushed::UserInsertRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserMappingService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::crushed::UserQueryResponse::default_instance();
    case 1:
      return ::crushed::UserInsertResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserMappingService_Stub::UserMappingService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserMappingService_Stub::UserMappingService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserMappingService_Stub::~UserMappingService_Stub() {
  if (owns_channel_) delete channel_;
}

void UserMappingService_Stub::queryUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::UserQueryRequest* request,
                              ::crushed::UserQueryResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserMappingService_Stub::insertUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::UserInsertRequest* request,
                              ::crushed::UserInsertResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

RoomMappingService::~RoomMappingService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RoomMappingService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_2eproto);
  return file_level_service_descriptors_mysql_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RoomMappingService::GetDescriptor() {
  return descriptor();
}

void RoomMappingService::queryRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::RoomQueryRequest*,
                         ::crushed::RoomQueryResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method queryRoom() not implemented.");
  done->Run();
}

void RoomMappingService::queryLastRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::RoomQueryLastRequest*,
                         ::crushed::RoomQueryLastResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method queryLastRoom() not implemented.");
  done->Run();
}

void RoomMappingService::insertRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::RoomInsertRequest*,
                         ::crushed::RoomInsertResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method insertRoom() not implemented.");
  done->Run();
}

void RoomMappingService::removeRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::RoomRemoveRequest*,
                         ::crushed::RoomRemoveResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method removeRoom() not implemented.");
  done->Run();
}

void RoomMappingService::queryAllRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::RoomQueryAllRequest*,
                         ::crushed::RoomQueryAllResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method queryAllRoom() not implemented.");
  done->Run();
}

void RoomMappingService::queryByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::RoomQueryByNameRequest*,
                         ::crushed::RoomQueryByNameResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method queryByName() not implemented.");
  done->Run();
}

void RoomMappingService::queryAllByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::RoomQueryAllByNameRequest*,
                         ::crushed::RoomQueryAllByNameResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method queryAllByName() not implemented.");
  done->Run();
}

void RoomMappingService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_mysql_2eproto[1]);
  switch(method->index()) {
    case 0:
      queryRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::RoomQueryRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::RoomQueryResponse*>(
                 response),
             done);
      break;
    case 1:
      queryLastRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::RoomQueryLastRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::RoomQueryLastResponse*>(
                 response),
             done);
      break;
    case 2:
      insertRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::RoomInsertRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::RoomInsertResponse*>(
                 response),
             done);
      break;
    case 3:
      removeRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::RoomRemoveRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::RoomRemoveResponse*>(
                 response),
             done);
      break;
    case 4:
      queryAllRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::RoomQueryAllRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::RoomQueryAllResponse*>(
                 response),
             done);
      break;
    case 5:
      queryByName(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::RoomQueryByNameRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::RoomQueryByNameResponse*>(
                 response),
             done);
      break;
    case 6:
      queryAllByName(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::RoomQueryAllByNameRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::RoomQueryAllByNameResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RoomMappingService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::crushed::RoomQueryRequest::default_instance();
    case 1:
      return ::crushed::RoomQueryLastRequest::default_instance();
    case 2:
      return ::crushed::RoomInsertRequest::default_instance();
    case 3:
      return ::crushed::RoomRemoveRequest::default_instance();
    case 4:
      return ::crushed::RoomQueryAllRequest::default_instance();
    case 5:
      return ::crushed::RoomQueryByNameRequest::default_instance();
    case 6:
      return ::crushed::RoomQueryAllByNameRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RoomMappingService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::crushed::RoomQueryResponse::default_instance();
    case 1:
      return ::crushed::RoomQueryLastResponse::default_instance();
    case 2:
      return ::crushed::RoomInsertResponse::default_instance();
    case 3:
      return ::crushed::RoomRemoveResponse::default_instance();
    case 4:
      return ::crushed::RoomQueryAllResponse::default_instance();
    case 5:
      return ::crushed::RoomQueryByNameResponse::default_instance();
    case 6:
      return ::crushed::RoomQueryAllByNameResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RoomMappingService_Stub::RoomMappingService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RoomMappingService_Stub::RoomMappingService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RoomMappingService_Stub::~RoomMappingService_Stub() {
  if (owns_channel_) delete channel_;
}

void RoomMappingService_Stub::queryRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::RoomQueryRequest* request,
                              ::crushed::RoomQueryResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RoomMappingService_Stub::queryLastRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::RoomQueryLastRequest* request,
                              ::crushed::RoomQueryLastResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RoomMappingService_Stub::insertRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::RoomInsertRequest* request,
                              ::crushed::RoomInsertResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RoomMappingService_Stub::removeRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::RoomRemoveRequest* request,
                              ::crushed::RoomRemoveResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void RoomMappingService_Stub::queryAllRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::RoomQueryAllRequest* request,
                              ::crushed::RoomQueryAllResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void RoomMappingService_Stub::queryByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::RoomQueryByNameRequest* request,
                              ::crushed::RoomQueryByNameResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void RoomMappingService_Stub::queryAllByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::RoomQueryAllByNameRequest* request,
                              ::crushed::RoomQueryAllByNameResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
// ===================================================================

ChatMessageMappinngService::~ChatMessageMappinngService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatMessageMappinngService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mysql_2eproto);
  return file_level_service_descriptors_mysql_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatMessageMappinngService::GetDescriptor() {
  return descriptor();
}

void ChatMessageMappinngService::insertChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::crushed::ChatMessageInsertRequest*,
                         ::crushed::ChatMessageInsertResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method insertChatMessage() not implemented.");
  done->Run();
}

void ChatMessageMappinngService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_mysql_2eproto[2]);
  switch(method->index()) {
    case 0:
      insertChatMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::crushed::ChatMessageInsertRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::crushed::ChatMessageInsertResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatMessageMappinngService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::crushed::ChatMessageInsertRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatMessageMappinngService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::crushed::ChatMessageInsertResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatMessageMappinngService_Stub::ChatMessageMappinngService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatMessageMappinngService_Stub::ChatMessageMappinngService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ChatMessageMappinngService_Stub::~ChatMessageMappinngService_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatMessageMappinngService_Stub::insertChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::crushed::ChatMessageInsertRequest* request,
                              ::crushed::ChatMessageInsertResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace crushed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::crushed::MysqlResultCode* Arena::CreateMaybeMessage< ::crushed::MysqlResultCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::MysqlResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::User* Arena::CreateMaybeMessage< ::crushed::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::User >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::Rooms* Arena::CreateMaybeMessage< ::crushed::Rooms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::Rooms >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomUser* Arena::CreateMaybeMessage< ::crushed::RoomUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomUser >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::ChatMessage* Arena::CreateMaybeMessage< ::crushed::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::UserQueryRequest* Arena::CreateMaybeMessage< ::crushed::UserQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::UserQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::UserQueryResponse* Arena::CreateMaybeMessage< ::crushed::UserQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::UserQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::UserInsertRequest* Arena::CreateMaybeMessage< ::crushed::UserInsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::UserInsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::UserInsertResponse* Arena::CreateMaybeMessage< ::crushed::UserInsertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::UserInsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryRequest* Arena::CreateMaybeMessage< ::crushed::RoomQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryResponse* Arena::CreateMaybeMessage< ::crushed::RoomQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryLastRequest* Arena::CreateMaybeMessage< ::crushed::RoomQueryLastRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryLastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryLastResponse* Arena::CreateMaybeMessage< ::crushed::RoomQueryLastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryLastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomInsertRequest* Arena::CreateMaybeMessage< ::crushed::RoomInsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomInsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomInsertResponse* Arena::CreateMaybeMessage< ::crushed::RoomInsertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomInsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomRemoveRequest* Arena::CreateMaybeMessage< ::crushed::RoomRemoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomRemoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomRemoveResponse* Arena::CreateMaybeMessage< ::crushed::RoomRemoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomRemoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryAllRequest* Arena::CreateMaybeMessage< ::crushed::RoomQueryAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryAllResponse* Arena::CreateMaybeMessage< ::crushed::RoomQueryAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryAllResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryByNameRequest* Arena::CreateMaybeMessage< ::crushed::RoomQueryByNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryByNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryByNameResponse* Arena::CreateMaybeMessage< ::crushed::RoomQueryByNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryByNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryAllByNameRequest* Arena::CreateMaybeMessage< ::crushed::RoomQueryAllByNameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryAllByNameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::RoomQueryAllByNameResponse* Arena::CreateMaybeMessage< ::crushed::RoomQueryAllByNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::RoomQueryAllByNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::ChatMessageInsertRequest* Arena::CreateMaybeMessage< ::crushed::ChatMessageInsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::ChatMessageInsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::crushed::ChatMessageInsertResponse* Arena::CreateMaybeMessage< ::crushed::ChatMessageInsertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crushed::ChatMessageInsertResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
