// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysql_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysql_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysql_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysql_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mysql_2eproto;
namespace crushed {
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ChatMessageInsertRequest;
class ChatMessageInsertRequestDefaultTypeInternal;
extern ChatMessageInsertRequestDefaultTypeInternal _ChatMessageInsertRequest_default_instance_;
class ChatMessageInsertResponse;
class ChatMessageInsertResponseDefaultTypeInternal;
extern ChatMessageInsertResponseDefaultTypeInternal _ChatMessageInsertResponse_default_instance_;
class MysqlResultCode;
class MysqlResultCodeDefaultTypeInternal;
extern MysqlResultCodeDefaultTypeInternal _MysqlResultCode_default_instance_;
class RoomInsertRequest;
class RoomInsertRequestDefaultTypeInternal;
extern RoomInsertRequestDefaultTypeInternal _RoomInsertRequest_default_instance_;
class RoomInsertResponse;
class RoomInsertResponseDefaultTypeInternal;
extern RoomInsertResponseDefaultTypeInternal _RoomInsertResponse_default_instance_;
class RoomQueryAllByNameRequest;
class RoomQueryAllByNameRequestDefaultTypeInternal;
extern RoomQueryAllByNameRequestDefaultTypeInternal _RoomQueryAllByNameRequest_default_instance_;
class RoomQueryAllByNameResponse;
class RoomQueryAllByNameResponseDefaultTypeInternal;
extern RoomQueryAllByNameResponseDefaultTypeInternal _RoomQueryAllByNameResponse_default_instance_;
class RoomQueryAllRequest;
class RoomQueryAllRequestDefaultTypeInternal;
extern RoomQueryAllRequestDefaultTypeInternal _RoomQueryAllRequest_default_instance_;
class RoomQueryAllResponse;
class RoomQueryAllResponseDefaultTypeInternal;
extern RoomQueryAllResponseDefaultTypeInternal _RoomQueryAllResponse_default_instance_;
class RoomQueryByNameRequest;
class RoomQueryByNameRequestDefaultTypeInternal;
extern RoomQueryByNameRequestDefaultTypeInternal _RoomQueryByNameRequest_default_instance_;
class RoomQueryByNameResponse;
class RoomQueryByNameResponseDefaultTypeInternal;
extern RoomQueryByNameResponseDefaultTypeInternal _RoomQueryByNameResponse_default_instance_;
class RoomQueryLastRequest;
class RoomQueryLastRequestDefaultTypeInternal;
extern RoomQueryLastRequestDefaultTypeInternal _RoomQueryLastRequest_default_instance_;
class RoomQueryLastResponse;
class RoomQueryLastResponseDefaultTypeInternal;
extern RoomQueryLastResponseDefaultTypeInternal _RoomQueryLastResponse_default_instance_;
class RoomQueryRequest;
class RoomQueryRequestDefaultTypeInternal;
extern RoomQueryRequestDefaultTypeInternal _RoomQueryRequest_default_instance_;
class RoomQueryResponse;
class RoomQueryResponseDefaultTypeInternal;
extern RoomQueryResponseDefaultTypeInternal _RoomQueryResponse_default_instance_;
class RoomRemoveRequest;
class RoomRemoveRequestDefaultTypeInternal;
extern RoomRemoveRequestDefaultTypeInternal _RoomRemoveRequest_default_instance_;
class RoomRemoveResponse;
class RoomRemoveResponseDefaultTypeInternal;
extern RoomRemoveResponseDefaultTypeInternal _RoomRemoveResponse_default_instance_;
class RoomUser;
class RoomUserDefaultTypeInternal;
extern RoomUserDefaultTypeInternal _RoomUser_default_instance_;
class Rooms;
class RoomsDefaultTypeInternal;
extern RoomsDefaultTypeInternal _Rooms_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserInsertRequest;
class UserInsertRequestDefaultTypeInternal;
extern UserInsertRequestDefaultTypeInternal _UserInsertRequest_default_instance_;
class UserInsertResponse;
class UserInsertResponseDefaultTypeInternal;
extern UserInsertResponseDefaultTypeInternal _UserInsertResponse_default_instance_;
class UserQueryRequest;
class UserQueryRequestDefaultTypeInternal;
extern UserQueryRequestDefaultTypeInternal _UserQueryRequest_default_instance_;
class UserQueryResponse;
class UserQueryResponseDefaultTypeInternal;
extern UserQueryResponseDefaultTypeInternal _UserQueryResponse_default_instance_;
}  // namespace crushed
PROTOBUF_NAMESPACE_OPEN
template<> ::crushed::ChatMessage* Arena::CreateMaybeMessage<::crushed::ChatMessage>(Arena*);
template<> ::crushed::ChatMessageInsertRequest* Arena::CreateMaybeMessage<::crushed::ChatMessageInsertRequest>(Arena*);
template<> ::crushed::ChatMessageInsertResponse* Arena::CreateMaybeMessage<::crushed::ChatMessageInsertResponse>(Arena*);
template<> ::crushed::MysqlResultCode* Arena::CreateMaybeMessage<::crushed::MysqlResultCode>(Arena*);
template<> ::crushed::RoomInsertRequest* Arena::CreateMaybeMessage<::crushed::RoomInsertRequest>(Arena*);
template<> ::crushed::RoomInsertResponse* Arena::CreateMaybeMessage<::crushed::RoomInsertResponse>(Arena*);
template<> ::crushed::RoomQueryAllByNameRequest* Arena::CreateMaybeMessage<::crushed::RoomQueryAllByNameRequest>(Arena*);
template<> ::crushed::RoomQueryAllByNameResponse* Arena::CreateMaybeMessage<::crushed::RoomQueryAllByNameResponse>(Arena*);
template<> ::crushed::RoomQueryAllRequest* Arena::CreateMaybeMessage<::crushed::RoomQueryAllRequest>(Arena*);
template<> ::crushed::RoomQueryAllResponse* Arena::CreateMaybeMessage<::crushed::RoomQueryAllResponse>(Arena*);
template<> ::crushed::RoomQueryByNameRequest* Arena::CreateMaybeMessage<::crushed::RoomQueryByNameRequest>(Arena*);
template<> ::crushed::RoomQueryByNameResponse* Arena::CreateMaybeMessage<::crushed::RoomQueryByNameResponse>(Arena*);
template<> ::crushed::RoomQueryLastRequest* Arena::CreateMaybeMessage<::crushed::RoomQueryLastRequest>(Arena*);
template<> ::crushed::RoomQueryLastResponse* Arena::CreateMaybeMessage<::crushed::RoomQueryLastResponse>(Arena*);
template<> ::crushed::RoomQueryRequest* Arena::CreateMaybeMessage<::crushed::RoomQueryRequest>(Arena*);
template<> ::crushed::RoomQueryResponse* Arena::CreateMaybeMessage<::crushed::RoomQueryResponse>(Arena*);
template<> ::crushed::RoomRemoveRequest* Arena::CreateMaybeMessage<::crushed::RoomRemoveRequest>(Arena*);
template<> ::crushed::RoomRemoveResponse* Arena::CreateMaybeMessage<::crushed::RoomRemoveResponse>(Arena*);
template<> ::crushed::RoomUser* Arena::CreateMaybeMessage<::crushed::RoomUser>(Arena*);
template<> ::crushed::Rooms* Arena::CreateMaybeMessage<::crushed::Rooms>(Arena*);
template<> ::crushed::User* Arena::CreateMaybeMessage<::crushed::User>(Arena*);
template<> ::crushed::UserInsertRequest* Arena::CreateMaybeMessage<::crushed::UserInsertRequest>(Arena*);
template<> ::crushed::UserInsertResponse* Arena::CreateMaybeMessage<::crushed::UserInsertResponse>(Arena*);
template<> ::crushed::UserQueryRequest* Arena::CreateMaybeMessage<::crushed::UserQueryRequest>(Arena*);
template<> ::crushed::UserQueryResponse* Arena::CreateMaybeMessage<::crushed::UserQueryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace crushed {

// ===================================================================

class MysqlResultCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.MysqlResultCode) */ {
 public:
  inline MysqlResultCode() : MysqlResultCode(nullptr) {};
  virtual ~MysqlResultCode();

  MysqlResultCode(const MysqlResultCode& from);
  MysqlResultCode(MysqlResultCode&& from) noexcept
    : MysqlResultCode() {
    *this = ::std::move(from);
  }

  inline MysqlResultCode& operator=(const MysqlResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MysqlResultCode& operator=(MysqlResultCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MysqlResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlResultCode* internal_default_instance() {
    return reinterpret_cast<const MysqlResultCode*>(
               &_MysqlResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MysqlResultCode& a, MysqlResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(MysqlResultCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MysqlResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MysqlResultCode* New() const final {
    return CreateMaybeMessage<MysqlResultCode>(nullptr);
  }

  MysqlResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MysqlResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MysqlResultCode& from);
  void MergeFrom(const MysqlResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.MysqlResultCode";
  }
  protected:
  explicit MysqlResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.MysqlResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.User) */ {
 public:
  inline User() : User(nullptr) {};
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kUseridFieldNumber = 1,
  };
  // bytes username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class Rooms PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.Rooms) */ {
 public:
  inline Rooms() : Rooms(nullptr) {};
  virtual ~Rooms();

  Rooms(const Rooms& from);
  Rooms(Rooms&& from) noexcept
    : Rooms() {
    *this = ::std::move(from);
  }

  inline Rooms& operator=(const Rooms& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rooms& operator=(Rooms&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rooms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rooms* internal_default_instance() {
    return reinterpret_cast<const Rooms*>(
               &_Rooms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Rooms& a, Rooms& b) {
    a.Swap(&b);
  }
  inline void Swap(Rooms* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rooms* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rooms* New() const final {
    return CreateMaybeMessage<Rooms>(nullptr);
  }

  Rooms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rooms>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rooms& from);
  void MergeFrom(const Rooms& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rooms* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.Rooms";
  }
  protected:
  explicit Rooms(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomnameFieldNumber = 2,
    kRoomidFieldNumber = 1,
    kRoomuserFieldNumber = 3,
  };
  // bytes roomname = 2;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const void* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomuser = 3;
  void clear_roomuser();
  ::PROTOBUF_NAMESPACE_ID::int32 roomuser() const;
  void set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomuser() const;
  void _internal_set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.Rooms)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomUser) */ {
 public:
  inline RoomUser() : RoomUser(nullptr) {};
  virtual ~RoomUser();

  RoomUser(const RoomUser& from);
  RoomUser(RoomUser&& from) noexcept
    : RoomUser() {
    *this = ::std::move(from);
  }

  inline RoomUser& operator=(const RoomUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomUser& operator=(RoomUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomUser* internal_default_instance() {
    return reinterpret_cast<const RoomUser*>(
               &_RoomUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoomUser& a, RoomUser& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomUser* New() const final {
    return CreateMaybeMessage<RoomUser>(nullptr);
  }

  RoomUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomUser& from);
  void MergeFrom(const RoomUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomUser";
  }
  protected:
  explicit RoomUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomnameFieldNumber = 2,
    kUsernameFieldNumber = 4,
    kRoomidFieldNumber = 1,
    kRoomuserFieldNumber = 3,
  };
  // bytes roomname = 2;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const void* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // bytes username = 4;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomuser = 3;
  void clear_roomuser();
  ::PROTOBUF_NAMESPACE_ID::int32 roomuser() const;
  void set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomuser() const;
  void _internal_set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.RoomUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {};
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(nullptr);
  }

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendtimeFieldNumber = 4,
    kMessageFieldNumber = 5,
    kChatidFieldNumber = 1,
    kRoomidFieldNumber = 2,
    kUseridFieldNumber = 3,
  };
  // bytes sendtime = 4;
  void clear_sendtime();
  const std::string& sendtime() const;
  void set_sendtime(const std::string& value);
  void set_sendtime(std::string&& value);
  void set_sendtime(const char* value);
  void set_sendtime(const void* value, size_t size);
  std::string* mutable_sendtime();
  std::string* release_sendtime();
  void set_allocated_sendtime(std::string* sendtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sendtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sendtime(
      std::string* sendtime);
  private:
  const std::string& _internal_sendtime() const;
  void _internal_set_sendtime(const std::string& value);
  std::string* _internal_mutable_sendtime();
  public:

  // bytes message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 chatid = 1;
  void clear_chatid();
  ::PROTOBUF_NAMESPACE_ID::int32 chatid() const;
  void set_chatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chatid() const;
  void _internal_set_chatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomid = 2;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userid = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 chatid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class UserQueryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.UserQueryRequest) */ {
 public:
  inline UserQueryRequest() : UserQueryRequest(nullptr) {};
  virtual ~UserQueryRequest();

  UserQueryRequest(const UserQueryRequest& from);
  UserQueryRequest(UserQueryRequest&& from) noexcept
    : UserQueryRequest() {
    *this = ::std::move(from);
  }

  inline UserQueryRequest& operator=(const UserQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQueryRequest& operator=(UserQueryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserQueryRequest* internal_default_instance() {
    return reinterpret_cast<const UserQueryRequest*>(
               &_UserQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserQueryRequest& a, UserQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQueryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserQueryRequest* New() const final {
    return CreateMaybeMessage<UserQueryRequest>(nullptr);
  }

  UserQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserQueryRequest& from);
  void MergeFrom(const UserQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.UserQueryRequest";
  }
  protected:
  explicit UserQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.UserQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class UserQueryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.UserQueryResponse) */ {
 public:
  inline UserQueryResponse() : UserQueryResponse(nullptr) {};
  virtual ~UserQueryResponse();

  UserQueryResponse(const UserQueryResponse& from);
  UserQueryResponse(UserQueryResponse&& from) noexcept
    : UserQueryResponse() {
    *this = ::std::move(from);
  }

  inline UserQueryResponse& operator=(const UserQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQueryResponse& operator=(UserQueryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserQueryResponse* internal_default_instance() {
    return reinterpret_cast<const UserQueryResponse*>(
               &_UserQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserQueryResponse& a, UserQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQueryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserQueryResponse* New() const final {
    return CreateMaybeMessage<UserQueryResponse>(nullptr);
  }

  UserQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserQueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserQueryResponse& from);
  void MergeFrom(const UserQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.UserQueryResponse";
  }
  protected:
  explicit UserQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // .crushed.User user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::crushed::User& user() const;
  ::crushed::User* release_user();
  ::crushed::User* mutable_user();
  void set_allocated_user(::crushed::User* user);
  private:
  const ::crushed::User& _internal_user() const;
  ::crushed::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::crushed::User* user);
  ::crushed::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:crushed.UserQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  ::crushed::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class UserInsertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.UserInsertRequest) */ {
 public:
  inline UserInsertRequest() : UserInsertRequest(nullptr) {};
  virtual ~UserInsertRequest();

  UserInsertRequest(const UserInsertRequest& from);
  UserInsertRequest(UserInsertRequest&& from) noexcept
    : UserInsertRequest() {
    *this = ::std::move(from);
  }

  inline UserInsertRequest& operator=(const UserInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInsertRequest& operator=(UserInsertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInsertRequest* internal_default_instance() {
    return reinterpret_cast<const UserInsertRequest*>(
               &_UserInsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserInsertRequest& a, UserInsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInsertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInsertRequest* New() const final {
    return CreateMaybeMessage<UserInsertRequest>(nullptr);
  }

  UserInsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInsertRequest& from);
  void MergeFrom(const UserInsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.UserInsertRequest";
  }
  protected:
  explicit UserInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .crushed.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::crushed::User& user() const;
  ::crushed::User* release_user();
  ::crushed::User* mutable_user();
  void set_allocated_user(::crushed::User* user);
  private:
  const ::crushed::User& _internal_user() const;
  ::crushed::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::crushed::User* user);
  ::crushed::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:crushed.UserInsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class UserInsertResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.UserInsertResponse) */ {
 public:
  inline UserInsertResponse() : UserInsertResponse(nullptr) {};
  virtual ~UserInsertResponse();

  UserInsertResponse(const UserInsertResponse& from);
  UserInsertResponse(UserInsertResponse&& from) noexcept
    : UserInsertResponse() {
    *this = ::std::move(from);
  }

  inline UserInsertResponse& operator=(const UserInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInsertResponse& operator=(UserInsertResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInsertResponse* internal_default_instance() {
    return reinterpret_cast<const UserInsertResponse*>(
               &_UserInsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserInsertResponse& a, UserInsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInsertResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInsertResponse* New() const final {
    return CreateMaybeMessage<UserInsertResponse>(nullptr);
  }

  UserInsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInsertResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInsertResponse& from);
  void MergeFrom(const UserInsertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInsertResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.UserInsertResponse";
  }
  protected:
  explicit UserInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:crushed.UserInsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryRequest) */ {
 public:
  inline RoomQueryRequest() : RoomQueryRequest(nullptr) {};
  virtual ~RoomQueryRequest();

  RoomQueryRequest(const RoomQueryRequest& from);
  RoomQueryRequest(RoomQueryRequest&& from) noexcept
    : RoomQueryRequest() {
    *this = ::std::move(from);
  }

  inline RoomQueryRequest& operator=(const RoomQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryRequest& operator=(RoomQueryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryRequest* internal_default_instance() {
    return reinterpret_cast<const RoomQueryRequest*>(
               &_RoomQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RoomQueryRequest& a, RoomQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryRequest* New() const final {
    return CreateMaybeMessage<RoomQueryRequest>(nullptr);
  }

  RoomQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryRequest& from);
  void MergeFrom(const RoomQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryRequest";
  }
  protected:
  explicit RoomQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
  };
  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryResponse) */ {
 public:
  inline RoomQueryResponse() : RoomQueryResponse(nullptr) {};
  virtual ~RoomQueryResponse();

  RoomQueryResponse(const RoomQueryResponse& from);
  RoomQueryResponse(RoomQueryResponse&& from) noexcept
    : RoomQueryResponse() {
    *this = ::std::move(from);
  }

  inline RoomQueryResponse& operator=(const RoomQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryResponse& operator=(RoomQueryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryResponse* internal_default_instance() {
    return reinterpret_cast<const RoomQueryResponse*>(
               &_RoomQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RoomQueryResponse& a, RoomQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryResponse* New() const final {
    return CreateMaybeMessage<RoomQueryResponse>(nullptr);
  }

  RoomQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryResponse& from);
  void MergeFrom(const RoomQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryResponse";
  }
  protected:
  explicit RoomQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kRoomsFieldNumber = 2,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // .crushed.Rooms rooms = 2;
  bool has_rooms() const;
  private:
  bool _internal_has_rooms() const;
  public:
  void clear_rooms();
  const ::crushed::Rooms& rooms() const;
  ::crushed::Rooms* release_rooms();
  ::crushed::Rooms* mutable_rooms();
  void set_allocated_rooms(::crushed::Rooms* rooms);
  private:
  const ::crushed::Rooms& _internal_rooms() const;
  ::crushed::Rooms* _internal_mutable_rooms();
  public:
  void unsafe_arena_set_allocated_rooms(
      ::crushed::Rooms* rooms);
  ::crushed::Rooms* unsafe_arena_release_rooms();

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  ::crushed::Rooms* rooms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryLastRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryLastRequest) */ {
 public:
  inline RoomQueryLastRequest() : RoomQueryLastRequest(nullptr) {};
  virtual ~RoomQueryLastRequest();

  RoomQueryLastRequest(const RoomQueryLastRequest& from);
  RoomQueryLastRequest(RoomQueryLastRequest&& from) noexcept
    : RoomQueryLastRequest() {
    *this = ::std::move(from);
  }

  inline RoomQueryLastRequest& operator=(const RoomQueryLastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryLastRequest& operator=(RoomQueryLastRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryLastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryLastRequest* internal_default_instance() {
    return reinterpret_cast<const RoomQueryLastRequest*>(
               &_RoomQueryLastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RoomQueryLastRequest& a, RoomQueryLastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryLastRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryLastRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryLastRequest* New() const final {
    return CreateMaybeMessage<RoomQueryLastRequest>(nullptr);
  }

  RoomQueryLastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryLastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryLastRequest& from);
  void MergeFrom(const RoomQueryLastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryLastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryLastRequest";
  }
  protected:
  explicit RoomQueryLastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomnameFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // bytes roomname = 1;
  void clear_roomname();
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const void* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // int32 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryLastRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryLastResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryLastResponse) */ {
 public:
  inline RoomQueryLastResponse() : RoomQueryLastResponse(nullptr) {};
  virtual ~RoomQueryLastResponse();

  RoomQueryLastResponse(const RoomQueryLastResponse& from);
  RoomQueryLastResponse(RoomQueryLastResponse&& from) noexcept
    : RoomQueryLastResponse() {
    *this = ::std::move(from);
  }

  inline RoomQueryLastResponse& operator=(const RoomQueryLastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryLastResponse& operator=(RoomQueryLastResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryLastResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryLastResponse* internal_default_instance() {
    return reinterpret_cast<const RoomQueryLastResponse*>(
               &_RoomQueryLastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RoomQueryLastResponse& a, RoomQueryLastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryLastResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryLastResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryLastResponse* New() const final {
    return CreateMaybeMessage<RoomQueryLastResponse>(nullptr);
  }

  RoomQueryLastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryLastResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryLastResponse& from);
  void MergeFrom(const RoomQueryLastResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryLastResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryLastResponse";
  }
  protected:
  explicit RoomQueryLastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kRoomsFieldNumber = 2,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // .crushed.Rooms rooms = 2;
  bool has_rooms() const;
  private:
  bool _internal_has_rooms() const;
  public:
  void clear_rooms();
  const ::crushed::Rooms& rooms() const;
  ::crushed::Rooms* release_rooms();
  ::crushed::Rooms* mutable_rooms();
  void set_allocated_rooms(::crushed::Rooms* rooms);
  private:
  const ::crushed::Rooms& _internal_rooms() const;
  ::crushed::Rooms* _internal_mutable_rooms();
  public:
  void unsafe_arena_set_allocated_rooms(
      ::crushed::Rooms* rooms);
  ::crushed::Rooms* unsafe_arena_release_rooms();

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryLastResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  ::crushed::Rooms* rooms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomInsertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomInsertRequest) */ {
 public:
  inline RoomInsertRequest() : RoomInsertRequest(nullptr) {};
  virtual ~RoomInsertRequest();

  RoomInsertRequest(const RoomInsertRequest& from);
  RoomInsertRequest(RoomInsertRequest&& from) noexcept
    : RoomInsertRequest() {
    *this = ::std::move(from);
  }

  inline RoomInsertRequest& operator=(const RoomInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInsertRequest& operator=(RoomInsertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInsertRequest* internal_default_instance() {
    return reinterpret_cast<const RoomInsertRequest*>(
               &_RoomInsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RoomInsertRequest& a, RoomInsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInsertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomInsertRequest* New() const final {
    return CreateMaybeMessage<RoomInsertRequest>(nullptr);
  }

  RoomInsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInsertRequest& from);
  void MergeFrom(const RoomInsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomInsertRequest";
  }
  protected:
  explicit RoomInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // .crushed.Rooms rooms = 1;
  bool has_rooms() const;
  private:
  bool _internal_has_rooms() const;
  public:
  void clear_rooms();
  const ::crushed::Rooms& rooms() const;
  ::crushed::Rooms* release_rooms();
  ::crushed::Rooms* mutable_rooms();
  void set_allocated_rooms(::crushed::Rooms* rooms);
  private:
  const ::crushed::Rooms& _internal_rooms() const;
  ::crushed::Rooms* _internal_mutable_rooms();
  public:
  void unsafe_arena_set_allocated_rooms(
      ::crushed::Rooms* rooms);
  ::crushed::Rooms* unsafe_arena_release_rooms();

  // @@protoc_insertion_point(class_scope:crushed.RoomInsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::Rooms* rooms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomInsertResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomInsertResponse) */ {
 public:
  inline RoomInsertResponse() : RoomInsertResponse(nullptr) {};
  virtual ~RoomInsertResponse();

  RoomInsertResponse(const RoomInsertResponse& from);
  RoomInsertResponse(RoomInsertResponse&& from) noexcept
    : RoomInsertResponse() {
    *this = ::std::move(from);
  }

  inline RoomInsertResponse& operator=(const RoomInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInsertResponse& operator=(RoomInsertResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInsertResponse* internal_default_instance() {
    return reinterpret_cast<const RoomInsertResponse*>(
               &_RoomInsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RoomInsertResponse& a, RoomInsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInsertResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomInsertResponse* New() const final {
    return CreateMaybeMessage<RoomInsertResponse>(nullptr);
  }

  RoomInsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInsertResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInsertResponse& from);
  void MergeFrom(const RoomInsertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInsertResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomInsertResponse";
  }
  protected:
  explicit RoomInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:crushed.RoomInsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomRemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomRemoveRequest) */ {
 public:
  inline RoomRemoveRequest() : RoomRemoveRequest(nullptr) {};
  virtual ~RoomRemoveRequest();

  RoomRemoveRequest(const RoomRemoveRequest& from);
  RoomRemoveRequest(RoomRemoveRequest&& from) noexcept
    : RoomRemoveRequest() {
    *this = ::std::move(from);
  }

  inline RoomRemoveRequest& operator=(const RoomRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomRemoveRequest& operator=(RoomRemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RoomRemoveRequest*>(
               &_RoomRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RoomRemoveRequest& a, RoomRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomRemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomRemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomRemoveRequest* New() const final {
    return CreateMaybeMessage<RoomRemoveRequest>(nullptr);
  }

  RoomRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomRemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomRemoveRequest& from);
  void MergeFrom(const RoomRemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomRemoveRequest";
  }
  protected:
  explicit RoomRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
  };
  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.RoomRemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomRemoveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomRemoveResponse) */ {
 public:
  inline RoomRemoveResponse() : RoomRemoveResponse(nullptr) {};
  virtual ~RoomRemoveResponse();

  RoomRemoveResponse(const RoomRemoveResponse& from);
  RoomRemoveResponse(RoomRemoveResponse&& from) noexcept
    : RoomRemoveResponse() {
    *this = ::std::move(from);
  }

  inline RoomRemoveResponse& operator=(const RoomRemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomRemoveResponse& operator=(RoomRemoveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomRemoveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomRemoveResponse* internal_default_instance() {
    return reinterpret_cast<const RoomRemoveResponse*>(
               &_RoomRemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RoomRemoveResponse& a, RoomRemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomRemoveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomRemoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomRemoveResponse* New() const final {
    return CreateMaybeMessage<RoomRemoveResponse>(nullptr);
  }

  RoomRemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomRemoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomRemoveResponse& from);
  void MergeFrom(const RoomRemoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomRemoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomRemoveResponse";
  }
  protected:
  explicit RoomRemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:crushed.RoomRemoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryAllRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryAllRequest) */ {
 public:
  inline RoomQueryAllRequest() : RoomQueryAllRequest(nullptr) {};
  virtual ~RoomQueryAllRequest();

  RoomQueryAllRequest(const RoomQueryAllRequest& from);
  RoomQueryAllRequest(RoomQueryAllRequest&& from) noexcept
    : RoomQueryAllRequest() {
    *this = ::std::move(from);
  }

  inline RoomQueryAllRequest& operator=(const RoomQueryAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryAllRequest& operator=(RoomQueryAllRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryAllRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryAllRequest* internal_default_instance() {
    return reinterpret_cast<const RoomQueryAllRequest*>(
               &_RoomQueryAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RoomQueryAllRequest& a, RoomQueryAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryAllRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryAllRequest* New() const final {
    return CreateMaybeMessage<RoomQueryAllRequest>(nullptr);
  }

  RoomQueryAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryAllRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryAllRequest& from);
  void MergeFrom(const RoomQueryAllRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryAllRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryAllRequest";
  }
  protected:
  explicit RoomQueryAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryAllResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryAllResponse) */ {
 public:
  inline RoomQueryAllResponse() : RoomQueryAllResponse(nullptr) {};
  virtual ~RoomQueryAllResponse();

  RoomQueryAllResponse(const RoomQueryAllResponse& from);
  RoomQueryAllResponse(RoomQueryAllResponse&& from) noexcept
    : RoomQueryAllResponse() {
    *this = ::std::move(from);
  }

  inline RoomQueryAllResponse& operator=(const RoomQueryAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryAllResponse& operator=(RoomQueryAllResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryAllResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryAllResponse* internal_default_instance() {
    return reinterpret_cast<const RoomQueryAllResponse*>(
               &_RoomQueryAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RoomQueryAllResponse& a, RoomQueryAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryAllResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryAllResponse* New() const final {
    return CreateMaybeMessage<RoomQueryAllResponse>(nullptr);
  }

  RoomQueryAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryAllResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryAllResponse& from);
  void MergeFrom(const RoomQueryAllResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryAllResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryAllResponse";
  }
  protected:
  explicit RoomQueryAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .crushed.Rooms rooms = 2;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::crushed::Rooms* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::Rooms >*
      mutable_rooms();
  private:
  const ::crushed::Rooms& _internal_rooms(int index) const;
  ::crushed::Rooms* _internal_add_rooms();
  public:
  const ::crushed::Rooms& rooms(int index) const;
  ::crushed::Rooms* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::Rooms >&
      rooms() const;

  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::Rooms > rooms_;
  ::crushed::MysqlResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryByNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryByNameRequest) */ {
 public:
  inline RoomQueryByNameRequest() : RoomQueryByNameRequest(nullptr) {};
  virtual ~RoomQueryByNameRequest();

  RoomQueryByNameRequest(const RoomQueryByNameRequest& from);
  RoomQueryByNameRequest(RoomQueryByNameRequest&& from) noexcept
    : RoomQueryByNameRequest() {
    *this = ::std::move(from);
  }

  inline RoomQueryByNameRequest& operator=(const RoomQueryByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryByNameRequest& operator=(RoomQueryByNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryByNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryByNameRequest* internal_default_instance() {
    return reinterpret_cast<const RoomQueryByNameRequest*>(
               &_RoomQueryByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RoomQueryByNameRequest& a, RoomQueryByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryByNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryByNameRequest* New() const final {
    return CreateMaybeMessage<RoomQueryByNameRequest>(nullptr);
  }

  RoomQueryByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryByNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryByNameRequest& from);
  void MergeFrom(const RoomQueryByNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryByNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryByNameRequest";
  }
  protected:
  explicit RoomQueryByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
  };
  // int32 roomid = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryByNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryByNameResponse) */ {
 public:
  inline RoomQueryByNameResponse() : RoomQueryByNameResponse(nullptr) {};
  virtual ~RoomQueryByNameResponse();

  RoomQueryByNameResponse(const RoomQueryByNameResponse& from);
  RoomQueryByNameResponse(RoomQueryByNameResponse&& from) noexcept
    : RoomQueryByNameResponse() {
    *this = ::std::move(from);
  }

  inline RoomQueryByNameResponse& operator=(const RoomQueryByNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryByNameResponse& operator=(RoomQueryByNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryByNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryByNameResponse* internal_default_instance() {
    return reinterpret_cast<const RoomQueryByNameResponse*>(
               &_RoomQueryByNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RoomQueryByNameResponse& a, RoomQueryByNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryByNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryByNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryByNameResponse* New() const final {
    return CreateMaybeMessage<RoomQueryByNameResponse>(nullptr);
  }

  RoomQueryByNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryByNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryByNameResponse& from);
  void MergeFrom(const RoomQueryByNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryByNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryByNameResponse";
  }
  protected:
  explicit RoomQueryByNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kRoomuserFieldNumber = 2,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // .crushed.RoomUser roomuser = 2;
  bool has_roomuser() const;
  private:
  bool _internal_has_roomuser() const;
  public:
  void clear_roomuser();
  const ::crushed::RoomUser& roomuser() const;
  ::crushed::RoomUser* release_roomuser();
  ::crushed::RoomUser* mutable_roomuser();
  void set_allocated_roomuser(::crushed::RoomUser* roomuser);
  private:
  const ::crushed::RoomUser& _internal_roomuser() const;
  ::crushed::RoomUser* _internal_mutable_roomuser();
  public:
  void unsafe_arena_set_allocated_roomuser(
      ::crushed::RoomUser* roomuser);
  ::crushed::RoomUser* unsafe_arena_release_roomuser();

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryByNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  ::crushed::RoomUser* roomuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryAllByNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryAllByNameRequest) */ {
 public:
  inline RoomQueryAllByNameRequest() : RoomQueryAllByNameRequest(nullptr) {};
  virtual ~RoomQueryAllByNameRequest();

  RoomQueryAllByNameRequest(const RoomQueryAllByNameRequest& from);
  RoomQueryAllByNameRequest(RoomQueryAllByNameRequest&& from) noexcept
    : RoomQueryAllByNameRequest() {
    *this = ::std::move(from);
  }

  inline RoomQueryAllByNameRequest& operator=(const RoomQueryAllByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryAllByNameRequest& operator=(RoomQueryAllByNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryAllByNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryAllByNameRequest* internal_default_instance() {
    return reinterpret_cast<const RoomQueryAllByNameRequest*>(
               &_RoomQueryAllByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RoomQueryAllByNameRequest& a, RoomQueryAllByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryAllByNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryAllByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryAllByNameRequest* New() const final {
    return CreateMaybeMessage<RoomQueryAllByNameRequest>(nullptr);
  }

  RoomQueryAllByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryAllByNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryAllByNameRequest& from);
  void MergeFrom(const RoomQueryAllByNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryAllByNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryAllByNameRequest";
  }
  protected:
  explicit RoomQueryAllByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryAllByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class RoomQueryAllByNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.RoomQueryAllByNameResponse) */ {
 public:
  inline RoomQueryAllByNameResponse() : RoomQueryAllByNameResponse(nullptr) {};
  virtual ~RoomQueryAllByNameResponse();

  RoomQueryAllByNameResponse(const RoomQueryAllByNameResponse& from);
  RoomQueryAllByNameResponse(RoomQueryAllByNameResponse&& from) noexcept
    : RoomQueryAllByNameResponse() {
    *this = ::std::move(from);
  }

  inline RoomQueryAllByNameResponse& operator=(const RoomQueryAllByNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomQueryAllByNameResponse& operator=(RoomQueryAllByNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomQueryAllByNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomQueryAllByNameResponse* internal_default_instance() {
    return reinterpret_cast<const RoomQueryAllByNameResponse*>(
               &_RoomQueryAllByNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RoomQueryAllByNameResponse& a, RoomQueryAllByNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomQueryAllByNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomQueryAllByNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomQueryAllByNameResponse* New() const final {
    return CreateMaybeMessage<RoomQueryAllByNameResponse>(nullptr);
  }

  RoomQueryAllByNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomQueryAllByNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomQueryAllByNameResponse& from);
  void MergeFrom(const RoomQueryAllByNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomQueryAllByNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.RoomQueryAllByNameResponse";
  }
  protected:
  explicit RoomQueryAllByNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomuserFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .crushed.RoomUser roomuser = 2;
  int roomuser_size() const;
  private:
  int _internal_roomuser_size() const;
  public:
  void clear_roomuser();
  ::crushed::RoomUser* mutable_roomuser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::RoomUser >*
      mutable_roomuser();
  private:
  const ::crushed::RoomUser& _internal_roomuser(int index) const;
  ::crushed::RoomUser* _internal_add_roomuser();
  public:
  const ::crushed::RoomUser& roomuser(int index) const;
  ::crushed::RoomUser* add_roomuser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::RoomUser >&
      roomuser() const;

  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:crushed.RoomQueryAllByNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::RoomUser > roomuser_;
  ::crushed::MysqlResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class ChatMessageInsertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.ChatMessageInsertRequest) */ {
 public:
  inline ChatMessageInsertRequest() : ChatMessageInsertRequest(nullptr) {};
  virtual ~ChatMessageInsertRequest();

  ChatMessageInsertRequest(const ChatMessageInsertRequest& from);
  ChatMessageInsertRequest(ChatMessageInsertRequest&& from) noexcept
    : ChatMessageInsertRequest() {
    *this = ::std::move(from);
  }

  inline ChatMessageInsertRequest& operator=(const ChatMessageInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageInsertRequest& operator=(ChatMessageInsertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessageInsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessageInsertRequest* internal_default_instance() {
    return reinterpret_cast<const ChatMessageInsertRequest*>(
               &_ChatMessageInsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ChatMessageInsertRequest& a, ChatMessageInsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageInsertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageInsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageInsertRequest* New() const final {
    return CreateMaybeMessage<ChatMessageInsertRequest>(nullptr);
  }

  ChatMessageInsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessageInsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessageInsertRequest& from);
  void MergeFrom(const ChatMessageInsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageInsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.ChatMessageInsertRequest";
  }
  protected:
  explicit ChatMessageInsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatmessageFieldNumber = 1,
  };
  // .crushed.ChatMessage chatmessage = 1;
  bool has_chatmessage() const;
  private:
  bool _internal_has_chatmessage() const;
  public:
  void clear_chatmessage();
  const ::crushed::ChatMessage& chatmessage() const;
  ::crushed::ChatMessage* release_chatmessage();
  ::crushed::ChatMessage* mutable_chatmessage();
  void set_allocated_chatmessage(::crushed::ChatMessage* chatmessage);
  private:
  const ::crushed::ChatMessage& _internal_chatmessage() const;
  ::crushed::ChatMessage* _internal_mutable_chatmessage();
  public:
  void unsafe_arena_set_allocated_chatmessage(
      ::crushed::ChatMessage* chatmessage);
  ::crushed::ChatMessage* unsafe_arena_release_chatmessage();

  // @@protoc_insertion_point(class_scope:crushed.ChatMessageInsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::ChatMessage* chatmessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// -------------------------------------------------------------------

class ChatMessageInsertResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crushed.ChatMessageInsertResponse) */ {
 public:
  inline ChatMessageInsertResponse() : ChatMessageInsertResponse(nullptr) {};
  virtual ~ChatMessageInsertResponse();

  ChatMessageInsertResponse(const ChatMessageInsertResponse& from);
  ChatMessageInsertResponse(ChatMessageInsertResponse&& from) noexcept
    : ChatMessageInsertResponse() {
    *this = ::std::move(from);
  }

  inline ChatMessageInsertResponse& operator=(const ChatMessageInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageInsertResponse& operator=(ChatMessageInsertResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessageInsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessageInsertResponse* internal_default_instance() {
    return reinterpret_cast<const ChatMessageInsertResponse*>(
               &_ChatMessageInsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ChatMessageInsertResponse& a, ChatMessageInsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageInsertResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageInsertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageInsertResponse* New() const final {
    return CreateMaybeMessage<ChatMessageInsertResponse>(nullptr);
  }

  ChatMessageInsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessageInsertResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessageInsertResponse& from);
  void MergeFrom(const ChatMessageInsertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageInsertResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crushed.ChatMessageInsertResponse";
  }
  protected:
  explicit ChatMessageInsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mysql_2eproto);
    return ::descriptor_table_mysql_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .crushed.MysqlResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::crushed::MysqlResultCode& result() const;
  ::crushed::MysqlResultCode* release_result();
  ::crushed::MysqlResultCode* mutable_result();
  void set_allocated_result(::crushed::MysqlResultCode* result);
  private:
  const ::crushed::MysqlResultCode& _internal_result() const;
  ::crushed::MysqlResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::crushed::MysqlResultCode* result);
  ::crushed::MysqlResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:crushed.ChatMessageInsertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::crushed::MysqlResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysql_2eproto;
};
// ===================================================================

class UserMappingService_Stub;

class UserMappingService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserMappingService() {};
 public:
  virtual ~UserMappingService();

  typedef UserMappingService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void queryUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::UserQueryRequest* request,
                       ::crushed::UserQueryResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void insertUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::UserInsertRequest* request,
                       ::crushed::UserInsertResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserMappingService);
};

class UserMappingService_Stub : public UserMappingService {
 public:
  UserMappingService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserMappingService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserMappingService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserMappingService ------------------------------------------

  void queryUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::UserQueryRequest* request,
                       ::crushed::UserQueryResponse* response,
                       ::google::protobuf::Closure* done);
  void insertUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::UserInsertRequest* request,
                       ::crushed::UserInsertResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserMappingService_Stub);
};


// -------------------------------------------------------------------

class RoomMappingService_Stub;

class RoomMappingService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RoomMappingService() {};
 public:
  virtual ~RoomMappingService();

  typedef RoomMappingService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void queryRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryRequest* request,
                       ::crushed::RoomQueryResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void queryLastRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryLastRequest* request,
                       ::crushed::RoomQueryLastResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void insertRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomInsertRequest* request,
                       ::crushed::RoomInsertResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void removeRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomRemoveRequest* request,
                       ::crushed::RoomRemoveResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void queryAllRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryAllRequest* request,
                       ::crushed::RoomQueryAllResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void queryByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryByNameRequest* request,
                       ::crushed::RoomQueryByNameResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void queryAllByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryAllByNameRequest* request,
                       ::crushed::RoomQueryAllByNameResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RoomMappingService);
};

class RoomMappingService_Stub : public RoomMappingService {
 public:
  RoomMappingService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RoomMappingService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RoomMappingService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RoomMappingService ------------------------------------------

  void queryRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryRequest* request,
                       ::crushed::RoomQueryResponse* response,
                       ::google::protobuf::Closure* done);
  void queryLastRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryLastRequest* request,
                       ::crushed::RoomQueryLastResponse* response,
                       ::google::protobuf::Closure* done);
  void insertRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomInsertRequest* request,
                       ::crushed::RoomInsertResponse* response,
                       ::google::protobuf::Closure* done);
  void removeRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomRemoveRequest* request,
                       ::crushed::RoomRemoveResponse* response,
                       ::google::protobuf::Closure* done);
  void queryAllRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryAllRequest* request,
                       ::crushed::RoomQueryAllResponse* response,
                       ::google::protobuf::Closure* done);
  void queryByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryByNameRequest* request,
                       ::crushed::RoomQueryByNameResponse* response,
                       ::google::protobuf::Closure* done);
  void queryAllByName(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::RoomQueryAllByNameRequest* request,
                       ::crushed::RoomQueryAllByNameResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RoomMappingService_Stub);
};


// -------------------------------------------------------------------

class ChatMessageMappinngService_Stub;

class ChatMessageMappinngService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChatMessageMappinngService() {};
 public:
  virtual ~ChatMessageMappinngService();

  typedef ChatMessageMappinngService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void insertChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::ChatMessageInsertRequest* request,
                       ::crushed::ChatMessageInsertResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatMessageMappinngService);
};

class ChatMessageMappinngService_Stub : public ChatMessageMappinngService {
 public:
  ChatMessageMappinngService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ChatMessageMappinngService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ChatMessageMappinngService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ChatMessageMappinngService ------------------------------------------

  void insertChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::crushed::ChatMessageInsertRequest* request,
                       ::crushed::ChatMessageInsertResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatMessageMappinngService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MysqlResultCode

// int32 code = 1;
inline void MysqlResultCode::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MysqlResultCode::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MysqlResultCode::code() const {
  // @@protoc_insertion_point(field_get:crushed.MysqlResultCode.code)
  return _internal_code();
}
inline void MysqlResultCode::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void MysqlResultCode::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:crushed.MysqlResultCode.code)
}

// bytes msg = 2;
inline void MysqlResultCode::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MysqlResultCode::msg() const {
  // @@protoc_insertion_point(field_get:crushed.MysqlResultCode.msg)
  return _internal_msg();
}
inline void MysqlResultCode::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:crushed.MysqlResultCode.msg)
}
inline std::string* MysqlResultCode::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:crushed.MysqlResultCode.msg)
  return _internal_mutable_msg();
}
inline const std::string& MysqlResultCode::_internal_msg() const {
  return msg_.Get();
}
inline void MysqlResultCode::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MysqlResultCode::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.MysqlResultCode.msg)
}
inline void MysqlResultCode::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.MysqlResultCode.msg)
}
inline void MysqlResultCode::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.MysqlResultCode.msg)
}
inline std::string* MysqlResultCode::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MysqlResultCode::release_msg() {
  // @@protoc_insertion_point(field_release:crushed.MysqlResultCode.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MysqlResultCode::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.MysqlResultCode.msg)
}
inline std::string* MysqlResultCode::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.MysqlResultCode.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MysqlResultCode::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.MysqlResultCode.msg)
}

// -------------------------------------------------------------------

// User

// int32 userid = 1;
inline void User::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::userid() const {
  // @@protoc_insertion_point(field_get:crushed.User.userid)
  return _internal_userid();
}
inline void User::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void User::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:crushed.User.userid)
}

// bytes username = 2;
inline void User::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:crushed.User.username)
  return _internal_username();
}
inline void User::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:crushed.User.username)
}
inline std::string* User::mutable_username() {
  // @@protoc_insertion_point(field_mutable:crushed.User.username)
  return _internal_mutable_username();
}
inline const std::string& User::_internal_username() const {
  return username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.User.username)
}
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.User.username)
}
inline void User::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.User.username)
}
inline std::string* User::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:crushed.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.User.username)
}
inline std::string* User::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.User.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.User.username)
}

// bytes password = 3;
inline void User::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:crushed.User.password)
  return _internal_password();
}
inline void User::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:crushed.User.password)
}
inline std::string* User::mutable_password() {
  // @@protoc_insertion_point(field_mutable:crushed.User.password)
  return _internal_mutable_password();
}
inline const std::string& User::_internal_password() const {
  return password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.User.password)
}
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.User.password)
}
inline void User::set_password(const void* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.User.password)
}
inline std::string* User::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:crushed.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.User.password)
}
inline std::string* User::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.User.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.User.password)
}

// -------------------------------------------------------------------

// Rooms

// int32 roomid = 1;
inline void Rooms::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rooms::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rooms::roomid() const {
  // @@protoc_insertion_point(field_get:crushed.Rooms.roomid)
  return _internal_roomid();
}
inline void Rooms::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void Rooms::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:crushed.Rooms.roomid)
}

// bytes roomname = 2;
inline void Rooms::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Rooms::roomname() const {
  // @@protoc_insertion_point(field_get:crushed.Rooms.roomname)
  return _internal_roomname();
}
inline void Rooms::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:crushed.Rooms.roomname)
}
inline std::string* Rooms::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:crushed.Rooms.roomname)
  return _internal_mutable_roomname();
}
inline const std::string& Rooms::_internal_roomname() const {
  return roomname_.Get();
}
inline void Rooms::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rooms::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.Rooms.roomname)
}
inline void Rooms::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.Rooms.roomname)
}
inline void Rooms::set_roomname(const void* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.Rooms.roomname)
}
inline std::string* Rooms::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rooms::release_roomname() {
  // @@protoc_insertion_point(field_release:crushed.Rooms.roomname)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rooms::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.Rooms.roomname)
}
inline std::string* Rooms::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.Rooms.roomname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Rooms::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.Rooms.roomname)
}

// int32 roomuser = 3;
inline void Rooms::clear_roomuser() {
  roomuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rooms::_internal_roomuser() const {
  return roomuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rooms::roomuser() const {
  // @@protoc_insertion_point(field_get:crushed.Rooms.roomuser)
  return _internal_roomuser();
}
inline void Rooms::_internal_set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomuser_ = value;
}
inline void Rooms::set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomuser(value);
  // @@protoc_insertion_point(field_set:crushed.Rooms.roomuser)
}

// -------------------------------------------------------------------

// RoomUser

// int32 roomid = 1;
inline void RoomUser::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomUser::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomUser::roomid() const {
  // @@protoc_insertion_point(field_get:crushed.RoomUser.roomid)
  return _internal_roomid();
}
inline void RoomUser::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomUser::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:crushed.RoomUser.roomid)
}

// bytes roomname = 2;
inline void RoomUser::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomUser::roomname() const {
  // @@protoc_insertion_point(field_get:crushed.RoomUser.roomname)
  return _internal_roomname();
}
inline void RoomUser::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:crushed.RoomUser.roomname)
}
inline std::string* RoomUser::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomUser.roomname)
  return _internal_mutable_roomname();
}
inline const std::string& RoomUser::_internal_roomname() const {
  return roomname_.Get();
}
inline void RoomUser::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomUser::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.RoomUser.roomname)
}
inline void RoomUser::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.RoomUser.roomname)
}
inline void RoomUser::set_roomname(const void* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.RoomUser.roomname)
}
inline std::string* RoomUser::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomUser::release_roomname() {
  // @@protoc_insertion_point(field_release:crushed.RoomUser.roomname)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomUser::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomUser.roomname)
}
inline std::string* RoomUser::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.RoomUser.roomname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomUser::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomUser.roomname)
}

// int32 roomuser = 3;
inline void RoomUser::clear_roomuser() {
  roomuser_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomUser::_internal_roomuser() const {
  return roomuser_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomUser::roomuser() const {
  // @@protoc_insertion_point(field_get:crushed.RoomUser.roomuser)
  return _internal_roomuser();
}
inline void RoomUser::_internal_set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomuser_ = value;
}
inline void RoomUser::set_roomuser(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomuser(value);
  // @@protoc_insertion_point(field_set:crushed.RoomUser.roomuser)
}

// bytes username = 4;
inline void RoomUser::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomUser::username() const {
  // @@protoc_insertion_point(field_get:crushed.RoomUser.username)
  return _internal_username();
}
inline void RoomUser::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:crushed.RoomUser.username)
}
inline std::string* RoomUser::mutable_username() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomUser.username)
  return _internal_mutable_username();
}
inline const std::string& RoomUser::_internal_username() const {
  return username_.Get();
}
inline void RoomUser::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomUser::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.RoomUser.username)
}
inline void RoomUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.RoomUser.username)
}
inline void RoomUser::set_username(const void* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.RoomUser.username)
}
inline std::string* RoomUser::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomUser::release_username() {
  // @@protoc_insertion_point(field_release:crushed.RoomUser.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomUser::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomUser.username)
}
inline std::string* RoomUser::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.RoomUser.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomUser::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomUser.username)
}

// -------------------------------------------------------------------

// ChatMessage

// int32 chatid = 1;
inline void ChatMessage::clear_chatid() {
  chatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::_internal_chatid() const {
  return chatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::chatid() const {
  // @@protoc_insertion_point(field_get:crushed.ChatMessage.chatid)
  return _internal_chatid();
}
inline void ChatMessage::_internal_set_chatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chatid_ = value;
}
inline void ChatMessage::set_chatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chatid(value);
  // @@protoc_insertion_point(field_set:crushed.ChatMessage.chatid)
}

// int32 roomid = 2;
inline void ChatMessage::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::roomid() const {
  // @@protoc_insertion_point(field_get:crushed.ChatMessage.roomid)
  return _internal_roomid();
}
inline void ChatMessage::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void ChatMessage::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:crushed.ChatMessage.roomid)
}

// int32 userid = 3;
inline void ChatMessage::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::userid() const {
  // @@protoc_insertion_point(field_get:crushed.ChatMessage.userid)
  return _internal_userid();
}
inline void ChatMessage::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void ChatMessage::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:crushed.ChatMessage.userid)
}

// bytes sendtime = 4;
inline void ChatMessage::clear_sendtime() {
  sendtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatMessage::sendtime() const {
  // @@protoc_insertion_point(field_get:crushed.ChatMessage.sendtime)
  return _internal_sendtime();
}
inline void ChatMessage::set_sendtime(const std::string& value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:crushed.ChatMessage.sendtime)
}
inline std::string* ChatMessage::mutable_sendtime() {
  // @@protoc_insertion_point(field_mutable:crushed.ChatMessage.sendtime)
  return _internal_mutable_sendtime();
}
inline const std::string& ChatMessage::_internal_sendtime() const {
  return sendtime_.Get();
}
inline void ChatMessage::_internal_set_sendtime(const std::string& value) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatMessage::set_sendtime(std::string&& value) {
  
  sendtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.ChatMessage.sendtime)
}
inline void ChatMessage::set_sendtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.ChatMessage.sendtime)
}
inline void ChatMessage::set_sendtime(const void* value,
    size_t size) {
  
  sendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.ChatMessage.sendtime)
}
inline std::string* ChatMessage::_internal_mutable_sendtime() {
  
  return sendtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatMessage::release_sendtime() {
  // @@protoc_insertion_point(field_release:crushed.ChatMessage.sendtime)
  return sendtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessage::set_allocated_sendtime(std::string* sendtime) {
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.ChatMessage.sendtime)
}
inline std::string* ChatMessage::unsafe_arena_release_sendtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.ChatMessage.sendtime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sendtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatMessage::unsafe_arena_set_allocated_sendtime(
    std::string* sendtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sendtime != nullptr) {
    
  } else {
    
  }
  sendtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sendtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ChatMessage.sendtime)
}

// bytes message = 5;
inline void ChatMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:crushed.ChatMessage.message)
  return _internal_message();
}
inline void ChatMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:crushed.ChatMessage.message)
}
inline std::string* ChatMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:crushed.ChatMessage.message)
  return _internal_mutable_message();
}
inline const std::string& ChatMessage::_internal_message() const {
  return message_.Get();
}
inline void ChatMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.ChatMessage.message)
}
inline void ChatMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.ChatMessage.message)
}
inline void ChatMessage::set_message(const void* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.ChatMessage.message)
}
inline std::string* ChatMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:crushed.ChatMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.ChatMessage.message)
}
inline std::string* ChatMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.ChatMessage.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ChatMessage.message)
}

// -------------------------------------------------------------------

// UserQueryRequest

// int32 userid = 1;
inline void UserQueryRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserQueryRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserQueryRequest::userid() const {
  // @@protoc_insertion_point(field_get:crushed.UserQueryRequest.userid)
  return _internal_userid();
}
inline void UserQueryRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void UserQueryRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:crushed.UserQueryRequest.userid)
}

// -------------------------------------------------------------------

// UserQueryResponse

// .crushed.MysqlResultCode result = 1;
inline bool UserQueryResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UserQueryResponse::has_result() const {
  return _internal_has_result();
}
inline void UserQueryResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& UserQueryResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& UserQueryResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.UserQueryResponse.result)
  return _internal_result();
}
inline void UserQueryResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.UserQueryResponse.result)
}
inline ::crushed::MysqlResultCode* UserQueryResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* UserQueryResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.UserQueryResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* UserQueryResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* UserQueryResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.UserQueryResponse.result)
  return _internal_mutable_result();
}
inline void UserQueryResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.UserQueryResponse.result)
}

// .crushed.User user = 2;
inline bool UserQueryResponse::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UserQueryResponse::has_user() const {
  return _internal_has_user();
}
inline void UserQueryResponse::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::crushed::User& UserQueryResponse::_internal_user() const {
  const ::crushed::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::User*>(
      &::crushed::_User_default_instance_);
}
inline const ::crushed::User& UserQueryResponse::user() const {
  // @@protoc_insertion_point(field_get:crushed.UserQueryResponse.user)
  return _internal_user();
}
inline void UserQueryResponse::unsafe_arena_set_allocated_user(
    ::crushed::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.UserQueryResponse.user)
}
inline ::crushed::User* UserQueryResponse::release_user() {
  auto temp = unsafe_arena_release_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::User* UserQueryResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:crushed.UserQueryResponse.user)
  
  ::crushed::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::crushed::User* UserQueryResponse::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::crushed::User* UserQueryResponse::mutable_user() {
  // @@protoc_insertion_point(field_mutable:crushed.UserQueryResponse.user)
  return _internal_mutable_user();
}
inline void UserQueryResponse::set_allocated_user(::crushed::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:crushed.UserQueryResponse.user)
}

// -------------------------------------------------------------------

// UserInsertRequest

// .crushed.User user = 1;
inline bool UserInsertRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UserInsertRequest::has_user() const {
  return _internal_has_user();
}
inline void UserInsertRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::crushed::User& UserInsertRequest::_internal_user() const {
  const ::crushed::User* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::User*>(
      &::crushed::_User_default_instance_);
}
inline const ::crushed::User& UserInsertRequest::user() const {
  // @@protoc_insertion_point(field_get:crushed.UserInsertRequest.user)
  return _internal_user();
}
inline void UserInsertRequest::unsafe_arena_set_allocated_user(
    ::crushed::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.UserInsertRequest.user)
}
inline ::crushed::User* UserInsertRequest::release_user() {
  auto temp = unsafe_arena_release_user();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::User* UserInsertRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:crushed.UserInsertRequest.user)
  
  ::crushed::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::crushed::User* UserInsertRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::crushed::User* UserInsertRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:crushed.UserInsertRequest.user)
  return _internal_mutable_user();
}
inline void UserInsertRequest::set_allocated_user(::crushed::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:crushed.UserInsertRequest.user)
}

// -------------------------------------------------------------------

// UserInsertResponse

// .crushed.MysqlResultCode result = 1;
inline bool UserInsertResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UserInsertResponse::has_result() const {
  return _internal_has_result();
}
inline void UserInsertResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& UserInsertResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& UserInsertResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.UserInsertResponse.result)
  return _internal_result();
}
inline void UserInsertResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.UserInsertResponse.result)
}
inline ::crushed::MysqlResultCode* UserInsertResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* UserInsertResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.UserInsertResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* UserInsertResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* UserInsertResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.UserInsertResponse.result)
  return _internal_mutable_result();
}
inline void UserInsertResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.UserInsertResponse.result)
}

// -------------------------------------------------------------------

// RoomQueryRequest

// int32 roomid = 1;
inline void RoomQueryRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomQueryRequest::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomQueryRequest::roomid() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryRequest.roomid)
  return _internal_roomid();
}
inline void RoomQueryRequest::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomQueryRequest::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:crushed.RoomQueryRequest.roomid)
}

// -------------------------------------------------------------------

// RoomQueryResponse

// .crushed.MysqlResultCode result = 1;
inline bool RoomQueryResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RoomQueryResponse::has_result() const {
  return _internal_has_result();
}
inline void RoomQueryResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& RoomQueryResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& RoomQueryResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryResponse.result)
  return _internal_result();
}
inline void RoomQueryResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryResponse.result)
}
inline ::crushed::MysqlResultCode* RoomQueryResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* RoomQueryResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryResponse.result)
  return _internal_mutable_result();
}
inline void RoomQueryResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryResponse.result)
}

// .crushed.Rooms rooms = 2;
inline bool RoomQueryResponse::_internal_has_rooms() const {
  return this != internal_default_instance() && rooms_ != nullptr;
}
inline bool RoomQueryResponse::has_rooms() const {
  return _internal_has_rooms();
}
inline void RoomQueryResponse::clear_rooms() {
  if (GetArena() == nullptr && rooms_ != nullptr) {
    delete rooms_;
  }
  rooms_ = nullptr;
}
inline const ::crushed::Rooms& RoomQueryResponse::_internal_rooms() const {
  const ::crushed::Rooms* p = rooms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::Rooms*>(
      &::crushed::_Rooms_default_instance_);
}
inline const ::crushed::Rooms& RoomQueryResponse::rooms() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryResponse.rooms)
  return _internal_rooms();
}
inline void RoomQueryResponse::unsafe_arena_set_allocated_rooms(
    ::crushed::Rooms* rooms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rooms_);
  }
  rooms_ = rooms;
  if (rooms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryResponse.rooms)
}
inline ::crushed::Rooms* RoomQueryResponse::release_rooms() {
  auto temp = unsafe_arena_release_rooms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::Rooms* RoomQueryResponse::unsafe_arena_release_rooms() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryResponse.rooms)
  
  ::crushed::Rooms* temp = rooms_;
  rooms_ = nullptr;
  return temp;
}
inline ::crushed::Rooms* RoomQueryResponse::_internal_mutable_rooms() {
  
  if (rooms_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::Rooms>(GetArena());
    rooms_ = p;
  }
  return rooms_;
}
inline ::crushed::Rooms* RoomQueryResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryResponse.rooms)
  return _internal_mutable_rooms();
}
inline void RoomQueryResponse::set_allocated_rooms(::crushed::Rooms* rooms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rooms_;
  }
  if (rooms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rooms);
    if (message_arena != submessage_arena) {
      rooms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rooms, submessage_arena);
    }
    
  } else {
    
  }
  rooms_ = rooms;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryResponse.rooms)
}

// -------------------------------------------------------------------

// RoomQueryLastRequest

// bytes roomname = 1;
inline void RoomQueryLastRequest::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoomQueryLastRequest::roomname() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryLastRequest.roomname)
  return _internal_roomname();
}
inline void RoomQueryLastRequest::set_roomname(const std::string& value) {
  _internal_set_roomname(value);
  // @@protoc_insertion_point(field_set:crushed.RoomQueryLastRequest.roomname)
}
inline std::string* RoomQueryLastRequest::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryLastRequest.roomname)
  return _internal_mutable_roomname();
}
inline const std::string& RoomQueryLastRequest::_internal_roomname() const {
  return roomname_.Get();
}
inline void RoomQueryLastRequest::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoomQueryLastRequest::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crushed.RoomQueryLastRequest.roomname)
}
inline void RoomQueryLastRequest::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crushed.RoomQueryLastRequest.roomname)
}
inline void RoomQueryLastRequest::set_roomname(const void* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crushed.RoomQueryLastRequest.roomname)
}
inline std::string* RoomQueryLastRequest::_internal_mutable_roomname() {
  
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoomQueryLastRequest::release_roomname() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryLastRequest.roomname)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoomQueryLastRequest::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryLastRequest.roomname)
}
inline std::string* RoomQueryLastRequest::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crushed.RoomQueryLastRequest.roomname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoomQueryLastRequest::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryLastRequest.roomname)
}

// int32 userid = 2;
inline void RoomQueryLastRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomQueryLastRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomQueryLastRequest::userid() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryLastRequest.userid)
  return _internal_userid();
}
inline void RoomQueryLastRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void RoomQueryLastRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:crushed.RoomQueryLastRequest.userid)
}

// -------------------------------------------------------------------

// RoomQueryLastResponse

// .crushed.MysqlResultCode result = 1;
inline bool RoomQueryLastResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RoomQueryLastResponse::has_result() const {
  return _internal_has_result();
}
inline void RoomQueryLastResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& RoomQueryLastResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& RoomQueryLastResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryLastResponse.result)
  return _internal_result();
}
inline void RoomQueryLastResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryLastResponse.result)
}
inline ::crushed::MysqlResultCode* RoomQueryLastResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryLastResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryLastResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryLastResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* RoomQueryLastResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryLastResponse.result)
  return _internal_mutable_result();
}
inline void RoomQueryLastResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryLastResponse.result)
}

// .crushed.Rooms rooms = 2;
inline bool RoomQueryLastResponse::_internal_has_rooms() const {
  return this != internal_default_instance() && rooms_ != nullptr;
}
inline bool RoomQueryLastResponse::has_rooms() const {
  return _internal_has_rooms();
}
inline void RoomQueryLastResponse::clear_rooms() {
  if (GetArena() == nullptr && rooms_ != nullptr) {
    delete rooms_;
  }
  rooms_ = nullptr;
}
inline const ::crushed::Rooms& RoomQueryLastResponse::_internal_rooms() const {
  const ::crushed::Rooms* p = rooms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::Rooms*>(
      &::crushed::_Rooms_default_instance_);
}
inline const ::crushed::Rooms& RoomQueryLastResponse::rooms() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryLastResponse.rooms)
  return _internal_rooms();
}
inline void RoomQueryLastResponse::unsafe_arena_set_allocated_rooms(
    ::crushed::Rooms* rooms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rooms_);
  }
  rooms_ = rooms;
  if (rooms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryLastResponse.rooms)
}
inline ::crushed::Rooms* RoomQueryLastResponse::release_rooms() {
  auto temp = unsafe_arena_release_rooms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::Rooms* RoomQueryLastResponse::unsafe_arena_release_rooms() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryLastResponse.rooms)
  
  ::crushed::Rooms* temp = rooms_;
  rooms_ = nullptr;
  return temp;
}
inline ::crushed::Rooms* RoomQueryLastResponse::_internal_mutable_rooms() {
  
  if (rooms_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::Rooms>(GetArena());
    rooms_ = p;
  }
  return rooms_;
}
inline ::crushed::Rooms* RoomQueryLastResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryLastResponse.rooms)
  return _internal_mutable_rooms();
}
inline void RoomQueryLastResponse::set_allocated_rooms(::crushed::Rooms* rooms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rooms_;
  }
  if (rooms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rooms);
    if (message_arena != submessage_arena) {
      rooms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rooms, submessage_arena);
    }
    
  } else {
    
  }
  rooms_ = rooms;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryLastResponse.rooms)
}

// -------------------------------------------------------------------

// RoomInsertRequest

// .crushed.Rooms rooms = 1;
inline bool RoomInsertRequest::_internal_has_rooms() const {
  return this != internal_default_instance() && rooms_ != nullptr;
}
inline bool RoomInsertRequest::has_rooms() const {
  return _internal_has_rooms();
}
inline void RoomInsertRequest::clear_rooms() {
  if (GetArena() == nullptr && rooms_ != nullptr) {
    delete rooms_;
  }
  rooms_ = nullptr;
}
inline const ::crushed::Rooms& RoomInsertRequest::_internal_rooms() const {
  const ::crushed::Rooms* p = rooms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::Rooms*>(
      &::crushed::_Rooms_default_instance_);
}
inline const ::crushed::Rooms& RoomInsertRequest::rooms() const {
  // @@protoc_insertion_point(field_get:crushed.RoomInsertRequest.rooms)
  return _internal_rooms();
}
inline void RoomInsertRequest::unsafe_arena_set_allocated_rooms(
    ::crushed::Rooms* rooms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rooms_);
  }
  rooms_ = rooms;
  if (rooms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomInsertRequest.rooms)
}
inline ::crushed::Rooms* RoomInsertRequest::release_rooms() {
  auto temp = unsafe_arena_release_rooms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::Rooms* RoomInsertRequest::unsafe_arena_release_rooms() {
  // @@protoc_insertion_point(field_release:crushed.RoomInsertRequest.rooms)
  
  ::crushed::Rooms* temp = rooms_;
  rooms_ = nullptr;
  return temp;
}
inline ::crushed::Rooms* RoomInsertRequest::_internal_mutable_rooms() {
  
  if (rooms_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::Rooms>(GetArena());
    rooms_ = p;
  }
  return rooms_;
}
inline ::crushed::Rooms* RoomInsertRequest::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomInsertRequest.rooms)
  return _internal_mutable_rooms();
}
inline void RoomInsertRequest::set_allocated_rooms(::crushed::Rooms* rooms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rooms_;
  }
  if (rooms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rooms);
    if (message_arena != submessage_arena) {
      rooms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rooms, submessage_arena);
    }
    
  } else {
    
  }
  rooms_ = rooms;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomInsertRequest.rooms)
}

// -------------------------------------------------------------------

// RoomInsertResponse

// .crushed.MysqlResultCode result = 1;
inline bool RoomInsertResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RoomInsertResponse::has_result() const {
  return _internal_has_result();
}
inline void RoomInsertResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& RoomInsertResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& RoomInsertResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.RoomInsertResponse.result)
  return _internal_result();
}
inline void RoomInsertResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomInsertResponse.result)
}
inline ::crushed::MysqlResultCode* RoomInsertResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* RoomInsertResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.RoomInsertResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* RoomInsertResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* RoomInsertResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomInsertResponse.result)
  return _internal_mutable_result();
}
inline void RoomInsertResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomInsertResponse.result)
}

// -------------------------------------------------------------------

// RoomRemoveRequest

// int32 roomid = 1;
inline void RoomRemoveRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomRemoveRequest::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomRemoveRequest::roomid() const {
  // @@protoc_insertion_point(field_get:crushed.RoomRemoveRequest.roomid)
  return _internal_roomid();
}
inline void RoomRemoveRequest::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomRemoveRequest::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:crushed.RoomRemoveRequest.roomid)
}

// -------------------------------------------------------------------

// RoomRemoveResponse

// .crushed.MysqlResultCode result = 1;
inline bool RoomRemoveResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RoomRemoveResponse::has_result() const {
  return _internal_has_result();
}
inline void RoomRemoveResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& RoomRemoveResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& RoomRemoveResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.RoomRemoveResponse.result)
  return _internal_result();
}
inline void RoomRemoveResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomRemoveResponse.result)
}
inline ::crushed::MysqlResultCode* RoomRemoveResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* RoomRemoveResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.RoomRemoveResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* RoomRemoveResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* RoomRemoveResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomRemoveResponse.result)
  return _internal_mutable_result();
}
inline void RoomRemoveResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomRemoveResponse.result)
}

// -------------------------------------------------------------------

// RoomQueryAllRequest

// -------------------------------------------------------------------

// RoomQueryAllResponse

// .crushed.MysqlResultCode result = 1;
inline bool RoomQueryAllResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RoomQueryAllResponse::has_result() const {
  return _internal_has_result();
}
inline void RoomQueryAllResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& RoomQueryAllResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& RoomQueryAllResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryAllResponse.result)
  return _internal_result();
}
inline void RoomQueryAllResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryAllResponse.result)
}
inline ::crushed::MysqlResultCode* RoomQueryAllResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryAllResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryAllResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryAllResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* RoomQueryAllResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryAllResponse.result)
  return _internal_mutable_result();
}
inline void RoomQueryAllResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryAllResponse.result)
}

// repeated .crushed.Rooms rooms = 2;
inline int RoomQueryAllResponse::_internal_rooms_size() const {
  return rooms_.size();
}
inline int RoomQueryAllResponse::rooms_size() const {
  return _internal_rooms_size();
}
inline void RoomQueryAllResponse::clear_rooms() {
  rooms_.Clear();
}
inline ::crushed::Rooms* RoomQueryAllResponse::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryAllResponse.rooms)
  return rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::Rooms >*
RoomQueryAllResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:crushed.RoomQueryAllResponse.rooms)
  return &rooms_;
}
inline const ::crushed::Rooms& RoomQueryAllResponse::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline const ::crushed::Rooms& RoomQueryAllResponse::rooms(int index) const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryAllResponse.rooms)
  return _internal_rooms(index);
}
inline ::crushed::Rooms* RoomQueryAllResponse::_internal_add_rooms() {
  return rooms_.Add();
}
inline ::crushed::Rooms* RoomQueryAllResponse::add_rooms() {
  // @@protoc_insertion_point(field_add:crushed.RoomQueryAllResponse.rooms)
  return _internal_add_rooms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::Rooms >&
RoomQueryAllResponse::rooms() const {
  // @@protoc_insertion_point(field_list:crushed.RoomQueryAllResponse.rooms)
  return rooms_;
}

// -------------------------------------------------------------------

// RoomQueryByNameRequest

// int32 roomid = 1;
inline void RoomQueryByNameRequest::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomQueryByNameRequest::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomQueryByNameRequest::roomid() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryByNameRequest.roomid)
  return _internal_roomid();
}
inline void RoomQueryByNameRequest::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomQueryByNameRequest::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:crushed.RoomQueryByNameRequest.roomid)
}

// -------------------------------------------------------------------

// RoomQueryByNameResponse

// .crushed.MysqlResultCode result = 1;
inline bool RoomQueryByNameResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RoomQueryByNameResponse::has_result() const {
  return _internal_has_result();
}
inline void RoomQueryByNameResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& RoomQueryByNameResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& RoomQueryByNameResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryByNameResponse.result)
  return _internal_result();
}
inline void RoomQueryByNameResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryByNameResponse.result)
}
inline ::crushed::MysqlResultCode* RoomQueryByNameResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryByNameResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryByNameResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryByNameResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* RoomQueryByNameResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryByNameResponse.result)
  return _internal_mutable_result();
}
inline void RoomQueryByNameResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryByNameResponse.result)
}

// .crushed.RoomUser roomuser = 2;
inline bool RoomQueryByNameResponse::_internal_has_roomuser() const {
  return this != internal_default_instance() && roomuser_ != nullptr;
}
inline bool RoomQueryByNameResponse::has_roomuser() const {
  return _internal_has_roomuser();
}
inline void RoomQueryByNameResponse::clear_roomuser() {
  if (GetArena() == nullptr && roomuser_ != nullptr) {
    delete roomuser_;
  }
  roomuser_ = nullptr;
}
inline const ::crushed::RoomUser& RoomQueryByNameResponse::_internal_roomuser() const {
  const ::crushed::RoomUser* p = roomuser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::RoomUser*>(
      &::crushed::_RoomUser_default_instance_);
}
inline const ::crushed::RoomUser& RoomQueryByNameResponse::roomuser() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryByNameResponse.roomuser)
  return _internal_roomuser();
}
inline void RoomQueryByNameResponse::unsafe_arena_set_allocated_roomuser(
    ::crushed::RoomUser* roomuser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomuser_);
  }
  roomuser_ = roomuser;
  if (roomuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryByNameResponse.roomuser)
}
inline ::crushed::RoomUser* RoomQueryByNameResponse::release_roomuser() {
  auto temp = unsafe_arena_release_roomuser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::RoomUser* RoomQueryByNameResponse::unsafe_arena_release_roomuser() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryByNameResponse.roomuser)
  
  ::crushed::RoomUser* temp = roomuser_;
  roomuser_ = nullptr;
  return temp;
}
inline ::crushed::RoomUser* RoomQueryByNameResponse::_internal_mutable_roomuser() {
  
  if (roomuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::RoomUser>(GetArena());
    roomuser_ = p;
  }
  return roomuser_;
}
inline ::crushed::RoomUser* RoomQueryByNameResponse::mutable_roomuser() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryByNameResponse.roomuser)
  return _internal_mutable_roomuser();
}
inline void RoomQueryByNameResponse::set_allocated_roomuser(::crushed::RoomUser* roomuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roomuser_;
  }
  if (roomuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roomuser);
    if (message_arena != submessage_arena) {
      roomuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomuser, submessage_arena);
    }
    
  } else {
    
  }
  roomuser_ = roomuser;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryByNameResponse.roomuser)
}

// -------------------------------------------------------------------

// RoomQueryAllByNameRequest

// -------------------------------------------------------------------

// RoomQueryAllByNameResponse

// .crushed.MysqlResultCode result = 1;
inline bool RoomQueryAllByNameResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RoomQueryAllByNameResponse::has_result() const {
  return _internal_has_result();
}
inline void RoomQueryAllByNameResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& RoomQueryAllByNameResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& RoomQueryAllByNameResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryAllByNameResponse.result)
  return _internal_result();
}
inline void RoomQueryAllByNameResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.RoomQueryAllByNameResponse.result)
}
inline ::crushed::MysqlResultCode* RoomQueryAllByNameResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryAllByNameResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.RoomQueryAllByNameResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* RoomQueryAllByNameResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* RoomQueryAllByNameResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryAllByNameResponse.result)
  return _internal_mutable_result();
}
inline void RoomQueryAllByNameResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.RoomQueryAllByNameResponse.result)
}

// repeated .crushed.RoomUser roomuser = 2;
inline int RoomQueryAllByNameResponse::_internal_roomuser_size() const {
  return roomuser_.size();
}
inline int RoomQueryAllByNameResponse::roomuser_size() const {
  return _internal_roomuser_size();
}
inline void RoomQueryAllByNameResponse::clear_roomuser() {
  roomuser_.Clear();
}
inline ::crushed::RoomUser* RoomQueryAllByNameResponse::mutable_roomuser(int index) {
  // @@protoc_insertion_point(field_mutable:crushed.RoomQueryAllByNameResponse.roomuser)
  return roomuser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::RoomUser >*
RoomQueryAllByNameResponse::mutable_roomuser() {
  // @@protoc_insertion_point(field_mutable_list:crushed.RoomQueryAllByNameResponse.roomuser)
  return &roomuser_;
}
inline const ::crushed::RoomUser& RoomQueryAllByNameResponse::_internal_roomuser(int index) const {
  return roomuser_.Get(index);
}
inline const ::crushed::RoomUser& RoomQueryAllByNameResponse::roomuser(int index) const {
  // @@protoc_insertion_point(field_get:crushed.RoomQueryAllByNameResponse.roomuser)
  return _internal_roomuser(index);
}
inline ::crushed::RoomUser* RoomQueryAllByNameResponse::_internal_add_roomuser() {
  return roomuser_.Add();
}
inline ::crushed::RoomUser* RoomQueryAllByNameResponse::add_roomuser() {
  // @@protoc_insertion_point(field_add:crushed.RoomQueryAllByNameResponse.roomuser)
  return _internal_add_roomuser();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crushed::RoomUser >&
RoomQueryAllByNameResponse::roomuser() const {
  // @@protoc_insertion_point(field_list:crushed.RoomQueryAllByNameResponse.roomuser)
  return roomuser_;
}

// -------------------------------------------------------------------

// ChatMessageInsertRequest

// .crushed.ChatMessage chatmessage = 1;
inline bool ChatMessageInsertRequest::_internal_has_chatmessage() const {
  return this != internal_default_instance() && chatmessage_ != nullptr;
}
inline bool ChatMessageInsertRequest::has_chatmessage() const {
  return _internal_has_chatmessage();
}
inline void ChatMessageInsertRequest::clear_chatmessage() {
  if (GetArena() == nullptr && chatmessage_ != nullptr) {
    delete chatmessage_;
  }
  chatmessage_ = nullptr;
}
inline const ::crushed::ChatMessage& ChatMessageInsertRequest::_internal_chatmessage() const {
  const ::crushed::ChatMessage* p = chatmessage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::ChatMessage*>(
      &::crushed::_ChatMessage_default_instance_);
}
inline const ::crushed::ChatMessage& ChatMessageInsertRequest::chatmessage() const {
  // @@protoc_insertion_point(field_get:crushed.ChatMessageInsertRequest.chatmessage)
  return _internal_chatmessage();
}
inline void ChatMessageInsertRequest::unsafe_arena_set_allocated_chatmessage(
    ::crushed::ChatMessage* chatmessage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatmessage_);
  }
  chatmessage_ = chatmessage;
  if (chatmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ChatMessageInsertRequest.chatmessage)
}
inline ::crushed::ChatMessage* ChatMessageInsertRequest::release_chatmessage() {
  auto temp = unsafe_arena_release_chatmessage();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::ChatMessage* ChatMessageInsertRequest::unsafe_arena_release_chatmessage() {
  // @@protoc_insertion_point(field_release:crushed.ChatMessageInsertRequest.chatmessage)
  
  ::crushed::ChatMessage* temp = chatmessage_;
  chatmessage_ = nullptr;
  return temp;
}
inline ::crushed::ChatMessage* ChatMessageInsertRequest::_internal_mutable_chatmessage() {
  
  if (chatmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::ChatMessage>(GetArena());
    chatmessage_ = p;
  }
  return chatmessage_;
}
inline ::crushed::ChatMessage* ChatMessageInsertRequest::mutable_chatmessage() {
  // @@protoc_insertion_point(field_mutable:crushed.ChatMessageInsertRequest.chatmessage)
  return _internal_mutable_chatmessage();
}
inline void ChatMessageInsertRequest::set_allocated_chatmessage(::crushed::ChatMessage* chatmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chatmessage_;
  }
  if (chatmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chatmessage);
    if (message_arena != submessage_arena) {
      chatmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatmessage, submessage_arena);
    }
    
  } else {
    
  }
  chatmessage_ = chatmessage;
  // @@protoc_insertion_point(field_set_allocated:crushed.ChatMessageInsertRequest.chatmessage)
}

// -------------------------------------------------------------------

// ChatMessageInsertResponse

// .crushed.MysqlResultCode result = 1;
inline bool ChatMessageInsertResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ChatMessageInsertResponse::has_result() const {
  return _internal_has_result();
}
inline void ChatMessageInsertResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::crushed::MysqlResultCode& ChatMessageInsertResponse::_internal_result() const {
  const ::crushed::MysqlResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::crushed::MysqlResultCode*>(
      &::crushed::_MysqlResultCode_default_instance_);
}
inline const ::crushed::MysqlResultCode& ChatMessageInsertResponse::result() const {
  // @@protoc_insertion_point(field_get:crushed.ChatMessageInsertResponse.result)
  return _internal_result();
}
inline void ChatMessageInsertResponse::unsafe_arena_set_allocated_result(
    ::crushed::MysqlResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crushed.ChatMessageInsertResponse.result)
}
inline ::crushed::MysqlResultCode* ChatMessageInsertResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crushed::MysqlResultCode* ChatMessageInsertResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:crushed.ChatMessageInsertResponse.result)
  
  ::crushed::MysqlResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::crushed::MysqlResultCode* ChatMessageInsertResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::crushed::MysqlResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::crushed::MysqlResultCode* ChatMessageInsertResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:crushed.ChatMessageInsertResponse.result)
  return _internal_mutable_result();
}
inline void ChatMessageInsertResponse::set_allocated_result(::crushed::MysqlResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:crushed.ChatMessageInsertResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace crushed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysql_2eproto
